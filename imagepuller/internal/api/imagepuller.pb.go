// source: https://github.com/kata-containers/kata-containers/blob/997a1f35ab68ad8cc2b24e8e20ea63f7de82acf9/src/libs/protocols/protos/confidential_data_hub.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: imagepuller.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImagePullRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// - `image_url`: The reference of the image to pull
	ImageUrl string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// - `bundle_path`: The path to store the OCI bundle. This path
	// should be created by client, and initially empty. After the RPC is
	// called, a mounted `rootfs` directory under the this path. Note
	// that this path is CDH's root filesystem, not the caller's root filesystem.
	// However, usually the caller (kata-agent) and the server (CDH) runs on the same
	// root, so it's safe to use an absolute path of kata-agent.
	BundlePath    string `protobuf:"bytes,2,opt,name=bundle_path,json=bundlePath,proto3" json:"bundle_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImagePullRequest) Reset() {
	*x = ImagePullRequest{}
	mi := &file_imagepuller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullRequest) ProtoMessage() {}

func (x *ImagePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imagepuller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullRequest.ProtoReflect.Descriptor instead.
func (*ImagePullRequest) Descriptor() ([]byte, []int) {
	return file_imagepuller_proto_rawDescGZIP(), []int{0}
}

func (x *ImagePullRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ImagePullRequest) GetBundlePath() string {
	if x != nil {
		return x.BundlePath
	}
	return ""
}

type ImagePullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImagePullResponse) Reset() {
	*x = ImagePullResponse{}
	mi := &file_imagepuller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagePullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullResponse) ProtoMessage() {}

func (x *ImagePullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imagepuller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullResponse.ProtoReflect.Descriptor instead.
func (*ImagePullResponse) Descriptor() ([]byte, []int) {
	return file_imagepuller_proto_rawDescGZIP(), []int{1}
}

var File_imagepuller_proto protoreflect.FileDescriptor

const file_imagepuller_proto_rawDesc = "" +
	"\n" +
	"\x11imagepuller.proto\x12\x03api\"P\n" +
	"\x10ImagePullRequest\x12\x1b\n" +
	"\timage_url\x18\x01 \x01(\tR\bimageUrl\x12\x1f\n" +
	"\vbundle_path\x18\x02 \x01(\tR\n" +
	"bundlePath\"\x13\n" +
	"\x11ImagePullResponse2N\n" +
	"\x10ImagePullService\x12:\n" +
	"\tPullImage\x12\x15.api.ImagePullRequest\x1a\x16.api.ImagePullResponseB:Z8github.com/edgelesssys/contrast/imagepuller/internal/apib\x06proto3"

var (
	file_imagepuller_proto_rawDescOnce sync.Once
	file_imagepuller_proto_rawDescData []byte
)

func file_imagepuller_proto_rawDescGZIP() []byte {
	file_imagepuller_proto_rawDescOnce.Do(func() {
		file_imagepuller_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_imagepuller_proto_rawDesc), len(file_imagepuller_proto_rawDesc)))
	})
	return file_imagepuller_proto_rawDescData
}

var file_imagepuller_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_imagepuller_proto_goTypes = []any{
	(*ImagePullRequest)(nil),  // 0: api.ImagePullRequest
	(*ImagePullResponse)(nil), // 1: api.ImagePullResponse
}
var file_imagepuller_proto_depIdxs = []int32{
	0, // 0: api.ImagePullService.PullImage:input_type -> api.ImagePullRequest
	1, // 1: api.ImagePullService.PullImage:output_type -> api.ImagePullResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_imagepuller_proto_init() }
func file_imagepuller_proto_init() {
	if File_imagepuller_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_imagepuller_proto_rawDesc), len(file_imagepuller_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imagepuller_proto_goTypes,
		DependencyIndexes: file_imagepuller_proto_depIdxs,
		MessageInfos:      file_imagepuller_proto_msgTypes,
	}.Build()
	File_imagepuller_proto = out.File
	file_imagepuller_proto_goTypes = nil
	file_imagepuller_proto_depIdxs = nil
}
