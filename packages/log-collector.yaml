apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: log-collector
  namespace: @@NAMESPACE@@
spec:
  selector:
    matchLabels:
      name: log-collector
  template:
    metadata:
      labels:
        name: log-collector
    spec:
      priorityClassName: high-priority-logcollector
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
        - name: log-collector
          image: docker.io/ubuntu:oracular # TODO(miampf): Replace with non docker.io image
          volumeMounts:
            - mountPath: /logs
              name: log-volume
              readOnly: true
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /usr/bin/bash
            - -c
            - |
              mkdir /export
              # TODO(miampf): Prepare an image that already has required tools installed
              apt-get update && apt-get install -y inotify-tools
              # collect all logs that may have been missed during startup
              for file in $(find /logs -name *.log); do
                if [[ -f "$file" && "$file" == *"$POD_NAMESPACE"* ]]; then
                  mkdir -p "/export$(dirname "$file")"
                  cp "$file" "/export$file"
                fi
              done
              inotifywait -m /logs -r -e create -e moved_to |
                while read path action file; do
                  filepath="$path$file"
                  if [[ -f "$filepath" && "$filepath" == *"$POD_NAMESPACE"* ]]; then
                    mkdir -p "/export$path"
                    tail --follow=name "$filepath" >"/export$filepath" &
                  fi
                done
      volumes:
        - name: log-volume
          # mount the nodes logs to the container
          hostPath:
            path: /var/log/pods
            type: Directory
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority-logcollector
value: 10000000
globalDefault: false
description: "This priority class is used to prioritise the log collector pod creation before anything else"
