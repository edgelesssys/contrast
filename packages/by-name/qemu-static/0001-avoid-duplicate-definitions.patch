From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tom Dohrmann <erbse.13@gmx.de>
Date: Wed, 10 Jul 2024 13:30:51 +0200
Subject: [PATCH] avoid duplicate definitions

Another library already defines crc32c and this causes linker errors.
Rename the function in QEMU to avoid conflicts.
> /nix/store/q7cd30gzrkq720riqfm1myrvygv9v516-x86_64-unknown-linux-musl-binutils-2.42/bin/x86_64-unknown-linux-musl-ld: /nix/store/bnkaijycj1svgfkglzzwbzr76my1b0xz-util-linux-minimal-static-x86_64-unknown-linux-musl-2.39.4-lib/lib/libblkid.a(libcommon_la-crc32c.o): in function `crc32c':
> (.text+0x0): multiple definition of `crc32c'; libqemuutil.a.p/util_crc32c.c.o:/build/qemu-9.0.1/build/../util/crc32c.c:109: first defined here
---
 block/vhdx.c                     | 4 ++--
 hw/net/net_rx_pkt.c              | 2 +-
 hw/uefi/var-service-core.c       | 2 +-
 include/qemu/crc32c.h            | 2 +-
 target/arm/tcg/helper-a64.c      | 4 ++--
 target/loongarch/tcg/op_helper.c | 2 +-
 util/crc32c.c                    | 4 ++--
 7 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/block/vhdx.c b/block/vhdx.c
index b2a4b813a0bd9e78056803ac0a2b3d3e629b1852..46d4c8b8704ceb4c3aecfa52325e89c0ef6247f0 100644
--- a/block/vhdx.c
+++ b/block/vhdx.c
@@ -157,7 +157,7 @@ uint32_t vhdx_update_checksum(uint8_t *buf, size_t size, int crc_offset)
     assert(size > (crc_offset + sizeof(crc)));
 
     memset(buf + crc_offset, 0, sizeof(crc));
-    crc =  crc32c(0xffffffff, buf, size);
+    crc =  __crc32c(0xffffffff, buf, size);
     crc = cpu_to_le32(crc);
     memcpy(buf + crc_offset, &crc, sizeof(crc));
 
@@ -176,7 +176,7 @@ uint32_t vhdx_checksum_calc(uint32_t crc, uint8_t *buf, size_t size,
         memset(buf + crc_offset, 0, sizeof(crc_orig));
     }
 
-    crc_new = crc32c(crc, buf, size);
+    crc_new = __crc32c(crc, buf, size);
     if (crc_offset > 0) {
         memcpy(buf + crc_offset, &crc_orig, sizeof(crc_orig));
     }
diff --git a/hw/net/net_rx_pkt.c b/hw/net/net_rx_pkt.c
index f87b6f046ccff814cce966804bd03980dbeb352d..c5a9d781d95b40d3b8eda15f69fd1bc7fc0182a3 100644
--- a/hw/net/net_rx_pkt.c
+++ b/hw/net/net_rx_pkt.c
@@ -565,7 +565,7 @@ _net_rx_pkt_validate_sctp_sum(struct NetRxPkt *pkt)
         return false;
     }
 
-    calculated = crc32c(0xffffffff,
+    calculated = __crc32c(0xffffffff,
                         (uint8_t *)vec->iov_base + off, vec->iov_len - off);
     calculated = iov_crc32c(calculated ^ 0xffffffff, vec + 1, vec_len - 1);
     valid = calculated == le32_to_cpu(original);
diff --git a/hw/uefi/var-service-core.c b/hw/uefi/var-service-core.c
index 4836a0cb811674f1406d8abea7e2d75e69930292..707fdb78343e823e462a60505a552b02008e9cea 100644
--- a/hw/uefi/var-service-core.c
+++ b/hw/uefi/var-service-core.c
@@ -230,7 +230,7 @@ static uint64_t uefi_vars_read(void *opaque, hwaddr addr, unsigned size)
         uv->pio_xfer_offset += size;
         break;
     case UEFI_VARS_REG_PIO_BUFFER_CRC32C:
-        retval = crc32c(0xffffffff, uv->pio_xfer_buffer, uv->pio_xfer_offset);
+        retval = __crc32c(0xffffffff, uv->pio_xfer_buffer, uv->pio_xfer_offset);
         break;
     case UEFI_VARS_REG_FLAGS:
         retval = 0;
diff --git a/include/qemu/crc32c.h b/include/qemu/crc32c.h
index 88b4d2b3b3304803456f5b23ef42dbf530381ec5..52ba066c2e784b8ea3d88671f3d7944062a3660e 100644
--- a/include/qemu/crc32c.h
+++ b/include/qemu/crc32c.h
@@ -29,7 +29,7 @@
 #define QEMU_CRC32C_H
 
 
-uint32_t crc32c(uint32_t crc, const uint8_t *data, unsigned int length);
+uint32_t __crc32c(uint32_t crc, const uint8_t *data, unsigned int length);
 uint32_t iov_crc32c(uint32_t crc, const struct iovec *iov, size_t iov_cnt);
 
 #endif
diff --git a/target/arm/tcg/helper-a64.c b/target/arm/tcg/helper-a64.c
index 9244848efed052578e38f1b737ca2b6c8694e8d5..a55b4644b896712350e6f5f7b464849370033a3c 100644
--- a/target/arm/tcg/helper-a64.c
+++ b/target/arm/tcg/helper-a64.c
@@ -401,7 +401,7 @@ AH_MINMAX_HELPER(vfp_ah_maxs, float32, float32, max)
 AH_MINMAX_HELPER(vfp_ah_maxd, float64, float64, max)
 
 /* 64-bit versions of the CRC helpers. Note that although the operation
- * (and the prototypes of crc32c() and crc32() mean that only the bottom
+ * (and the prototypes of __crc32c() and crc32() mean that only the bottom
  * 32 bits of the accumulator and result are used, we pass and return
  * uint64_t for convenience of the generated code. Unlike the 32-bit
  * instruction set versions, val may genuinely have 64 bits of data in it.
@@ -425,7 +425,7 @@ uint64_t HELPER(crc32c_64)(uint64_t acc, uint64_t val, uint32_t bytes)
     stq_le_p(buf, val);
 
     /* Linux crc32c converts the output to one's complement.  */
-    return crc32c(acc, buf, bytes) ^ 0xffffffff;
+    return __crc32c(acc, buf, bytes) ^ 0xffffffff;
 }
 
 /*
diff --git a/target/loongarch/tcg/op_helper.c b/target/loongarch/tcg/op_helper.c
index b17208e5b962f2191b2afa60181bff311d618bba..c4b6f112e1a4d85f4d170786db0d33a0dbf60ae2 100644
--- a/target/loongarch/tcg/op_helper.c
+++ b/target/loongarch/tcg/op_helper.c
@@ -77,7 +77,7 @@ target_ulong helper_crc32c(target_ulong val, target_ulong m, uint64_t sz)
     target_ulong mask = ((sz * 8) == 64) ? -1ULL : ((1ULL << (sz * 8)) - 1);
     m &= mask;
     stq_le_p(buf, m);
-    return (int32_t) (crc32c(val, buf, sz) ^ 0xffffffff);
+    return (int32_t) (__crc32c(val, buf, sz) ^ 0xffffffff);
 }
 
 target_ulong helper_cpucfg(CPULoongArchState *env, target_ulong rj)
diff --git a/util/crc32c.c b/util/crc32c.c
index ea7f345de86073998250f54a5a19aef0a5bf164f..d6b5fab1379641d88f230448e71c24e8396020bb 100644
--- a/util/crc32c.c
+++ b/util/crc32c.c
@@ -105,7 +105,7 @@ static const uint32_t crc32c_table[256] = {
 };
 
 
-uint32_t crc32c(uint32_t crc, const uint8_t *data, unsigned int length)
+uint32_t __crc32c(uint32_t crc, const uint8_t *data, unsigned int length)
 {
     while (length--) {
         crc = crc32c_table[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
@@ -116,7 +116,7 @@ uint32_t crc32c(uint32_t crc, const uint8_t *data, unsigned int length)
 uint32_t iov_crc32c(uint32_t crc, const struct iovec *iov, size_t iov_cnt)
 {
     while (iov_cnt--) {
-        crc = crc32c(crc, iov->iov_base, iov->iov_len) ^ 0xffffffff;
+        crc = __crc32c(crc, iov->iov_base, iov->iov_len) ^ 0xffffffff;
         iov++;
     }
     return crc ^ 0xffffffff;
