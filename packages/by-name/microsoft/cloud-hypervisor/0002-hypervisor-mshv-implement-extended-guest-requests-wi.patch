From bab58d1e2e7a3758920bcff0bf330a5ce64a0b79 Mon Sep 17 00:00:00 2001
From: Tom Dohrmann <erbse.13@gmx.de>
Date: Mon, 26 Aug 2024 11:14:34 +0200
Subject: [PATCH 2/2] hypervisor: mshv: implement extended guest requests with
 empty certs

Previously we didn't handle extended guest requests at all and always
returned an error. This lead to issues with some guests that expected
extended requests to succeed. Instead, handle extended requests like
normal requests and write zeros to the extended area to signal to the
guest that we don't want to supply any additional certificate data.

Signed-off-by: Tom Dohrmann <erbse.13@gmx.de>
---
 hypervisor/src/mshv/mod.rs           | 75 +++++++++++++++++++++-------
 hypervisor/src/mshv/snp_constants.rs |  1 +
 2 files changed, 57 insertions(+), 19 deletions(-)

diff --git a/hypervisor/src/mshv/mod.rs b/hypervisor/src/mshv/mod.rs
index b8fccf31..998570be 100644
--- a/hypervisor/src/mshv/mod.rs
+++ b/hypervisor/src/mshv/mod.rs
@@ -950,24 +950,6 @@ impl cpu::Vcpu for MshvVcpu {
                                         }
                                     }
                                 }
-                                SVM_EXITCODE_SNP_EXTENDED_GUEST_REQUEST => {
-                                    warn!("Fetching extended guest request is not supported");
-                                    // Extended guest request is not supported by the Hypervisor
-                                    // Returning the error to the guest
-                                    // 0x6 means `The NAE event was not valid`
-                                    // Reference: GHCB Spec, page 42
-                                    let value: u64 = 0x6;
-                                    let mut swei2_rw_gpa_arg = mshv_bindings::mshv_read_write_gpa {
-                                        base_gpa: ghcb_gpa + GHCB_SW_EXITINFO2_OFFSET,
-                                        byte_count: std::mem::size_of::<u64>() as u32,
-                                        ..Default::default()
-                                    };
-                                    swei2_rw_gpa_arg.data[0..8]
-                                        .copy_from_slice(&value.to_le_bytes());
-                                    self.fd
-                                        .gpa_write(&mut swei2_rw_gpa_arg)
-                                        .map_err(|e| cpu::HypervisorCpuError::GpaWrite(e.into()))?;
-                                }
                                 SVM_EXITCODE_IOIO_PROT => {
                                     let exit_info1 =
                                         info.__bindgen_anon_2.__bindgen_anon_1.sw_exit_info1 as u32;
@@ -1096,7 +1078,62 @@ impl cpu::Vcpu for MshvVcpu {
                                             })?;
                                     }
                                 }
-                                SVM_EXITCODE_SNP_GUEST_REQUEST => {
+                                SVM_EXITCODE_SNP_GUEST_REQUEST
+                                | SVM_EXITCODE_SNP_EXTENDED_GUEST_REQUEST => {
+                                    if exit_code == SVM_EXITCODE_SNP_EXTENDED_GUEST_REQUEST {
+                                        warn!("Fetching extended guest request is not supported");
+                                        // We don't support extended guest request, so we just write empty data.
+                                        // This matches the behavior of KVM in Linux 6.11.
+
+                                        // Read RAX & RBX from the GHCB.
+                                        let mut rax_rw_gpa_arg: mshv_read_write_gpa =
+                                            mshv_bindings::mshv_read_write_gpa {
+                                                base_gpa: ghcb_gpa + GHCB_RAX_OFFSET,
+                                                byte_count: std::mem::size_of::<u64>() as u32,
+                                                ..Default::default()
+                                            };
+                                        self.fd.gpa_read(&mut rax_rw_gpa_arg).map_err(|e| {
+                                            cpu::HypervisorCpuError::GpaRead(e.into())
+                                        })?;
+                                        let data_gpa = u64::from_le_bytes(
+                                            <[u8; 8]>::try_from(&rax_rw_gpa_arg.data[..8]).unwrap(),
+                                        );
+                                        let mut rbx_rw_gpa_arg: mshv_read_write_gpa =
+                                            mshv_bindings::mshv_read_write_gpa {
+                                                base_gpa: ghcb_gpa + GHCB_RBX_OFFSET,
+                                                byte_count: std::mem::size_of::<u64>() as u32,
+                                                ..Default::default()
+                                            };
+                                        self.fd.gpa_read(&mut rbx_rw_gpa_arg).map_err(|e| {
+                                            cpu::HypervisorCpuError::GpaRead(e.into())
+                                        })?;
+                                        let data_npages = u64::from_le_bytes(
+                                            <[u8; 8]>::try_from(&rbx_rw_gpa_arg.data[..8]).unwrap(),
+                                        );
+
+                                        if data_npages > 0 {
+                                            // The certificates are terminated by 24 zero bytes.
+                                            let mut certs_rw_gpa_arg =
+                                                mshv_bindings::mshv_read_write_gpa {
+                                                    base_gpa: data_gpa,
+                                                    byte_count: 16,
+                                                    ..Default::default()
+                                                };
+                                            self.fd.gpa_write(&mut certs_rw_gpa_arg).map_err(
+                                                |e| cpu::HypervisorCpuError::GpaWrite(e.into()),
+                                            )?;
+                                            let mut certs_rw_gpa_arg =
+                                                mshv_bindings::mshv_read_write_gpa {
+                                                    base_gpa: data_gpa + 16,
+                                                    byte_count: 8,
+                                                    ..Default::default()
+                                                };
+                                            self.fd.gpa_write(&mut certs_rw_gpa_arg).map_err(
+                                                |e| cpu::HypervisorCpuError::GpaWrite(e.into()),
+                                            )?;
+                                        }
+                                    }
+
                                     let req_gpa =
                                         info.__bindgen_anon_2.__bindgen_anon_1.sw_exit_info1;
                                     let rsp_gpa =
diff --git a/hypervisor/src/mshv/snp_constants.rs b/hypervisor/src/mshv/snp_constants.rs
index 307326dd..69b12364 100644
--- a/hypervisor/src/mshv/snp_constants.rs
+++ b/hypervisor/src/mshv/snp_constants.rs
@@ -20,5 +20,6 @@ pub const ECDSA_SIG_Y_COMPONENT_END: usize =
 // These constants are derived from GHCB spec Sect. 2.6 Table 3 GHCB Layout
 // Link: https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/specifications/56421.pdf
 pub const GHCB_RAX_OFFSET: u64 = 0x01F8;
+pub const GHCB_RBX_OFFSET: u64 = 0x0318;
 pub const GHCB_SW_EXITINFO1_OFFSET: u64 = 0x398;
 pub const GHCB_SW_EXITINFO2_OFFSET: u64 = 0x3A0;
--
2.45.2
