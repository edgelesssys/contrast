From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: jmxnzo <jakob.lammering@ruhr-uni-bochum.de>
Date: Mon, 9 Dec 2024 09:56:56 +0100
Subject: [PATCH] genpolicy: do not log policy annotation in 'debug'

---
 src/tools/genpolicy/src/obj_meta.rs | 37 ++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

diff --git a/src/tools/genpolicy/src/obj_meta.rs b/src/tools/genpolicy/src/obj_meta.rs
index cc549b71b4683bd89107d57a7d98d6f02db82023..e7458c604d568119ce5c60a9d3db6f6d89d44ab7 100644
--- a/src/tools/genpolicy/src/obj_meta.rs
+++ b/src/tools/genpolicy/src/obj_meta.rs
@@ -8,9 +8,10 @@
 
 use serde::{Deserialize, Serialize};
 use std::collections::BTreeMap;
+use std::fmt;
 
 /// See ObjectMeta in the Kubernetes API reference.
-#[derive(Clone, Debug, Default, Serialize, Deserialize)]
+#[derive(Clone, Default, Serialize, Deserialize)]
 pub struct ObjectMeta {
     #[serde(skip_serializing_if = "Option::is_none")]
     pub name: Option<String>,
@@ -46,3 +47,37 @@ impl ObjectMeta {
         self.namespace.as_ref().cloned()
     }
 }
+
+impl fmt::Debug for ObjectMeta {
+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
+        let mut debug_struct = f.debug_struct("ObjectMeta");
+
+        if let Some(ref name) = self.name {
+            debug_struct.field("name", name);
+        }
+        if let Some(ref generate_name) = self.generateName {
+            debug_struct.field("generateName", generate_name);
+        }
+        if let Some(ref labels) = self.labels {
+            debug_struct.field("labels", labels);
+        }
+        if let Some(ref annotations) = self.annotations {
+            let truncated_annotations: BTreeMap<_, _> = annotations
+                .iter()
+                .map(|(key, value)| {
+                    if value.len() > 4096 {
+                        (key, format!("{}<... truncated ...>", &value[..4096].to_string()))
+                    } else {
+                        (key, value.to_string())
+                    }
+                })
+                .collect();
+            debug_struct.field("annotations", &truncated_annotations);
+        }
+        if let Some(ref namespace) = self.namespace {
+            debug_struct.field("namespace", namespace);
+        }
+
+        debug_struct.finish()
+    }
+}
