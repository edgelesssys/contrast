From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Meyer <49727155+katexochen@users.noreply.github.com>
Date: Tue, 9 Jul 2024 16:07:09 +0200
Subject: [PATCH] genpolicy: add ability to filter for runtimeClassName

Signed-off-by: Paul Meyer <49727155+katexochen@users.noreply.github.com>
---
 src/tools/genpolicy/src/daemon_set.rs   |  9 +++++++++
 src/tools/genpolicy/src/deployment.rs   |  9 +++++++++
 src/tools/genpolicy/src/pod.rs          |  9 ++++++++-
 src/tools/genpolicy/src/policy.rs       | 12 ++++++++++++
 src/tools/genpolicy/src/stateful_set.rs |  9 +++++++++
 src/tools/genpolicy/src/utils.rs        |  8 ++++++++
 src/tools/genpolicy/src/yaml.rs         |  4 ++++
 7 files changed, 59 insertions(+), 1 deletion(-)

diff --git a/src/tools/genpolicy/src/daemon_set.rs b/src/tools/genpolicy/src/daemon_set.rs
index 65c5db08beedb10dfe7c2f16c99b92a8a0a24e0c..b543b989095300ec3a8bc0e00137e1087d24f90c 100644
--- a/src/tools/genpolicy/src/daemon_set.rs
+++ b/src/tools/genpolicy/src/daemon_set.rs
@@ -147,4 +147,13 @@ impl yaml::K8sResource for DaemonSet {
     fn get_process_fields(&self, process: &mut policy::KataProcess) {
         yaml::get_process_fields(process, &self.spec.template.spec.securityContext);
     }
+
+    fn get_runtime_class_name(&self) -> Option<String> {
+        self.spec
+            .template
+            .spec
+            .runtimeClassName
+            .clone()
+            .or_else(|| Some(String::new()))
+    }
 }
diff --git a/src/tools/genpolicy/src/deployment.rs b/src/tools/genpolicy/src/deployment.rs
index be2ffd6474550f71b1680c83888ee7c9fbcd8b33..8cd9ff51a7fdbcf232141b255e008babc6a4b108 100644
--- a/src/tools/genpolicy/src/deployment.rs
+++ b/src/tools/genpolicy/src/deployment.rs
@@ -145,4 +145,13 @@ impl yaml::K8sResource for Deployment {
     fn get_process_fields(&self, process: &mut policy::KataProcess) {
         yaml::get_process_fields(process, &self.spec.template.spec.securityContext);
     }
+
+    fn get_runtime_class_name(&self) -> Option<String> {
+        self.spec
+            .template
+            .spec
+            .runtimeClassName
+            .clone()
+            .or_else(|| Some(String::new()))
+    }
 }
diff --git a/src/tools/genpolicy/src/pod.rs b/src/tools/genpolicy/src/pod.rs
index cae93c53257ec8b2195974b14589cb5571d10623..45111763af659f7c86640779be95280eb8a4c23f 100644
--- a/src/tools/genpolicy/src/pod.rs
+++ b/src/tools/genpolicy/src/pod.rs
@@ -47,7 +47,7 @@ pub struct PodSpec {
     restartPolicy: Option<String>,
 
     #[serde(skip_serializing_if = "Option::is_none")]
-    runtimeClassName: Option<String>,
+    pub runtimeClassName: Option<String>,
 
     #[serde(skip_serializing_if = "Option::is_none")]
     pub initContainers: Option<Vec<Container>>,
@@ -889,6 +889,13 @@ impl yaml::K8sResource for Pod {
         false
     }
 
+    fn get_runtime_class_name(&self) -> Option<String> {
+        self.spec
+            .runtimeClassName
+            .clone()
+            .or_else(|| Some(String::new()))
+    }
+
     fn get_process_fields(&self, process: &mut policy::KataProcess) {
         yaml::get_process_fields(process, &self.spec.securityContext);
     }
diff --git a/src/tools/genpolicy/src/policy.rs b/src/tools/genpolicy/src/policy.rs
index ff06786ca8610a71059d469dac613750cc0c8623..b3c6557fd61be79e76110b99a6a7751dcc841602 100644
--- a/src/tools/genpolicy/src/policy.rs
+++ b/src/tools/genpolicy/src/policy.rs
@@ -10,6 +10,7 @@ use crate::agent;
 use crate::config_map;
 use crate::containerd;
 use crate::mount_and_storage;
+use crate::no_policy;
 use crate::pod;
 use crate::policy;
 use crate::pvc;
@@ -447,6 +448,17 @@ impl AgentPolicy {
                 let yaml_string = serde_yaml::to_string(&doc_mapping)?;
                 let silent = config.silent_unsupported_fields;
                 let (mut resource, kind) = yaml::new_k8s_resource(&yaml_string, silent)?;
+
+                // Filter out resources that don't match the runtime class name.
+                if let Some(resource_runtime_name) = resource.get_runtime_class_name() {
+                    if !config.runtime_class_names.is_empty() &&
+                       !config.runtime_class_names.iter().any(|prefix| resource_runtime_name.starts_with(prefix)) {
+                        resource = boxed::Box::new(no_policy::NoPolicyResource { yaml: yaml_string });
+                        resources.push(resource);
+                        continue;
+                    }
+                }
+
                 resource.init(config, &doc_mapping, silent).await;
 
                 // ConfigMap and Secret documents contain additional input for policy generation.
diff --git a/src/tools/genpolicy/src/stateful_set.rs b/src/tools/genpolicy/src/stateful_set.rs
index ec952af07c5ee134cc8cb6ae48246ced83fee0f5..a987e5e72292d36f5bbc3b27265002daf42c2819 100644
--- a/src/tools/genpolicy/src/stateful_set.rs
+++ b/src/tools/genpolicy/src/stateful_set.rs
@@ -197,6 +197,15 @@ impl yaml::K8sResource for StatefulSet {
     fn get_process_fields(&self, process: &mut policy::KataProcess) {
         yaml::get_process_fields(process, &self.spec.template.spec.securityContext);
     }
+
+    fn get_runtime_class_name(&self) -> Option<String> {
+        self.spec
+            .template
+            .spec
+            .runtimeClassName
+            .clone()
+            .or_else(|| Some(String::new()))
+    }
 }
 
 impl StatefulSet {
diff --git a/src/tools/genpolicy/src/utils.rs b/src/tools/genpolicy/src/utils.rs
index e45b188d40a82a32547290ccdfd4a263e193e1c2..2402c2ed213e45b89c47b2b6a94d54f8d200edb1 100644
--- a/src/tools/genpolicy/src/utils.rs
+++ b/src/tools/genpolicy/src/utils.rs
@@ -72,6 +72,12 @@ struct CommandLineOptions {
     )]
     containerd_socket_path: Option<String>,
 
+    #[clap(
+        long,
+        help = "If specified, resources that have a runtimeClassName field defined will only receive a policy if the parameter is a prefix one of the given runtime class names."
+    )]
+    runtime_class_names: Vec<String>,
+
     #[clap(short, long, help = "Print version information and exit")]
     version: bool,
 }
@@ -80,6 +86,7 @@ struct CommandLineOptions {
 #[derive(Clone, Debug)]
 pub struct Config {
     pub use_cache: bool,
+    pub runtime_class_names: Vec<String>,
 
     pub yaml_file: Option<String>,
     pub rego_rules_path: String,
@@ -98,6 +105,7 @@ impl Config {
         let args = CommandLineOptions::parse();
         Self {
             use_cache: args.use_cached_files,
+            runtime_class_names: args.runtime_class_names,
             yaml_file: args.yaml_file,
             rego_rules_path: args.rego_rules_path,
             json_settings_path: args.json_settings_path,
diff --git a/src/tools/genpolicy/src/yaml.rs b/src/tools/genpolicy/src/yaml.rs
index 105bd8628b86733788886202b6c21a2586aa0525..f3748f0e079766de08f26c38e9ff2c4ade0a7c7a 100644
--- a/src/tools/genpolicy/src/yaml.rs
+++ b/src/tools/genpolicy/src/yaml.rs
@@ -76,6 +76,10 @@ pub trait K8sResource {
         // No need to implement support for securityContext or similar fields
         // for some of the K8s resource types.
     }
+
+    fn get_runtime_class_name(&self) -> Option<String> {
+        None
+    }
 }
 
 /// See Reference / Kubernetes API / Common Definitions / LabelSelector.
