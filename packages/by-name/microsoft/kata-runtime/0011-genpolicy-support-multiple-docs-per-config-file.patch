From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Markus Rudy <mr@edgeless.systems>
Date: Mon, 14 Jul 2025 12:15:49 +0200
Subject: [PATCH] genpolicy: support multiple docs per --config-file

Signed-off-by: Markus Rudy <mr@edgeless.systems>
---
 src/tools/genpolicy/src/policy.rs | 60 +++++++++++++++++++------------
 1 file changed, 37 insertions(+), 23 deletions(-)

diff --git a/src/tools/genpolicy/src/policy.rs b/src/tools/genpolicy/src/policy.rs
index 262be63a198b93d7a5a7dd83c8cac482484d0152..07d7902104243984d1c1b7060341625d678559de 100644
--- a/src/tools/genpolicy/src/policy.rs
+++ b/src/tools/genpolicy/src/policy.rs
@@ -539,10 +539,12 @@ impl AgentPolicy {
 
         if let Some(config_files) = &config.config_files {
             for resource_file in config_files {
-                match parse_config_file(resource_file.clone()).await? {
-                    K8sResourceEnum::ConfigMap(config_map) => config_maps.push(config_map),
-                    K8sResourceEnum::PersistentVolumeClaim(pvc) => pvcs.push(pvc),
-                    K8sResourceEnum::Secret(secret) => secrets.push(secret),
+                for resource in parse_config_file(resource_file.clone(), &config).await? {
+                    match resource {
+                        K8sResourceEnum::ConfigMap(config_map) => config_maps.push(config_map),
+                        K8sResourceEnum::PersistentVolumeClaim(pvc) => pvcs.push(pvc),
+                        K8sResourceEnum::Secret(secret) => secrets.push(secret),
+                    }
                 }
             }
         }
@@ -881,27 +883,39 @@ fn get_image_layer_storages(
     storages.push(overlay_storage);
 }
 
-async fn parse_config_file(yaml_file: String) -> Result<K8sResourceEnum> {
+async fn parse_config_file(
+    yaml_file: String,
+    config: &utils::Config,
+) -> Result<Vec<K8sResourceEnum>> {
+    let mut k8sRes = Vec::new();
     let yaml_contents = yaml::get_input_yaml(&Some(yaml_file))?;
-    let document = serde_yaml::Deserializer::from_str(&yaml_contents);
-    let doc_mapping = Value::deserialize(document)?;
-    let kind = doc_mapping
-        .get("kind")
-        .and_then(|v| v.as_str())
-        .ok_or(anyhow!("no kind"))?;
-
-    match kind {
-        "ConfigMap" => Ok(K8sResourceEnum::ConfigMap(serde_yaml::from_value(
-            doc_mapping,
-        )?)),
-        "PersistentVolumeClaim" => Ok(K8sResourceEnum::PersistentVolumeClaim(
-            serde_yaml::from_value(doc_mapping)?,
-        )),
-        "Secret" => Ok(K8sResourceEnum::Secret(serde_yaml::from_value(
-            doc_mapping,
-        )?)),
-        k => Err(anyhow!("unsupported attached resource kind '{k}'")),
+    for document in serde_yaml::Deserializer::from_str(&yaml_contents) {
+        let doc_mapping = Value::deserialize(document)?;
+        if doc_mapping != Value::Null {
+            let yaml_string = serde_yaml::to_string(&doc_mapping)?;
+            let silent = config.silent_unsupported_fields;
+            let (mut resource, kind) = yaml::new_k8s_resource(&yaml_string, silent)?;
+
+            resource.init(config, &doc_mapping, silent).await;
+
+            // ConfigMap and Secret documents contain additional input for policy generation.
+            if kind.eq("ConfigMap") {
+                let config_map: config_map::ConfigMap = serde_yaml::from_str(&yaml_string)?;
+                debug!("{:#?}", &config_map);
+                k8sRes.push(K8sResourceEnum::ConfigMap(config_map));
+            } else if kind.eq("Secret") {
+                let secret: secret::Secret = serde_yaml::from_str(&yaml_string)?;
+                debug!("{:#?}", &secret);
+                k8sRes.push(K8sResourceEnum::Secret(secret));
+            } else if kind.eq("PersistentVolumeClaim") {
+                let pvc: pvc::PersistentVolumeClaim = serde_yaml::from_str(&yaml_string)?;
+                debug!("{:#?}", &pvc);
+                k8sRes.push(K8sResourceEnum::PersistentVolumeClaim(pvc));
+            }
+        }
     }
+
+    Ok(k8sRes)
 }
 
 /// Converts the given name to a string representation of its sha256 hash.
