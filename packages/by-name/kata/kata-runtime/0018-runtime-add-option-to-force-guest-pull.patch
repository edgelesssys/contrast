From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Meyer <katexochen0@gmail.com>
Date: Thu, 8 May 2025 11:46:01 +0200
Subject: [PATCH] runtime: add option to force guest pull

This enables guest pull via config, without the need of any external
snapshotter. When the config enables runtim.force_guest_pull, instead of
relying on annotations to select the way to share the root FS, we always
use guest pull.

Co-authored-by: Markus Rudy <mr@edgeless.systems>
Signed-off-by: Paul Meyer <katexochen0@gmail.com>
---
 .../configuration-qemu-coco-dev.toml.in       |  4 +
 .../configuration-qemu-nvidia-gpu-snp.toml.in |  4 +
 .../configuration-qemu-nvidia-gpu-tdx.toml.in |  4 +
 .../config/configuration-qemu-se.toml.in      |  4 +
 .../config/configuration-qemu-sev.toml.in     |  4 +
 .../config/configuration-qemu-snp.toml.in     |  4 +
 .../config/configuration-qemu-tdx.toml.in     |  4 +
 src/runtime/pkg/katautils/config.go           |  3 +
 src/runtime/pkg/oci/utils.go                  | 11 +++
 src/runtime/virtcontainers/fs_share_linux.go  | 23 ++++-
 .../virtcontainers/fs_share_linux_test.go     | 86 +++++++++++++++++++
 .../pkg/annotations/annotations.go            |  3 +
 src/runtime/virtcontainers/sandbox.go         | 11 +++
 13 files changed, 164 insertions(+), 1 deletion(-)

diff --git a/src/runtime/config/configuration-qemu-coco-dev.toml.in b/src/runtime/config/configuration-qemu-coco-dev.toml.in
index fdd3ddae2fbf977e6be9ad3cf7e45140974d4af7..da9fcbe09334f0db46f114f9b372c3f99ba57976 100644
--- a/src/runtime/config/configuration-qemu-coco-dev.toml.in
+++ b/src/runtime/config/configuration-qemu-coco-dev.toml.in
@@ -713,3 +713,7 @@ create_container_timeout = @DEFCREATECONTAINERTIMEOUT@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/config/configuration-qemu-nvidia-gpu-snp.toml.in b/src/runtime/config/configuration-qemu-nvidia-gpu-snp.toml.in
index c020e2d7a33f6b48cedde68a56a30b29fcd9dae5..5bc9ce0e5f0f2457b3f6fb265d92e40cd067ddec 100644
--- a/src/runtime/config/configuration-qemu-nvidia-gpu-snp.toml.in
+++ b/src/runtime/config/configuration-qemu-nvidia-gpu-snp.toml.in
@@ -698,3 +698,7 @@ create_container_timeout = @DEFAULTTIMEOUT_NV@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/config/configuration-qemu-nvidia-gpu-tdx.toml.in b/src/runtime/config/configuration-qemu-nvidia-gpu-tdx.toml.in
index d403fea935a5d0458c5f7ab4c6746a631b7e81b8..7d2d56e743016aff31fdd3ac4ddf435ac6b7536e 100644
--- a/src/runtime/config/configuration-qemu-nvidia-gpu-tdx.toml.in
+++ b/src/runtime/config/configuration-qemu-nvidia-gpu-tdx.toml.in
@@ -682,3 +682,7 @@ create_container_timeout = @DEFAULTTIMEOUT_NV@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/config/configuration-qemu-se.toml.in b/src/runtime/config/configuration-qemu-se.toml.in
index bf2b79ab3d4507a4c2ab5e7be3e9a253cde61f6f..4dbcc63a80e9be423db9b97175d2692f05a71e54 100644
--- a/src/runtime/config/configuration-qemu-se.toml.in
+++ b/src/runtime/config/configuration-qemu-se.toml.in
@@ -673,3 +673,7 @@ create_container_timeout = @DEFCREATECONTAINERTIMEOUT@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/config/configuration-qemu-sev.toml.in b/src/runtime/config/configuration-qemu-sev.toml.in
index 97198e4cdca28a85d432eccda32bb6daf6ce64b8..e63f34dc7d250dadf986360699c8165fecd5a8de 100644
--- a/src/runtime/config/configuration-qemu-sev.toml.in
+++ b/src/runtime/config/configuration-qemu-sev.toml.in
@@ -639,3 +639,7 @@ create_container_timeout = @DEFCREATECONTAINERTIMEOUT@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/config/configuration-qemu-snp.toml.in b/src/runtime/config/configuration-qemu-snp.toml.in
index 9427d26d0194f3dad762a4a8d9b1081e5e9c9b42..e9495d123a673a9b39c8a85d50ae4e33c5f24d42 100644
--- a/src/runtime/config/configuration-qemu-snp.toml.in
+++ b/src/runtime/config/configuration-qemu-snp.toml.in
@@ -691,3 +691,7 @@ create_container_timeout = @DEFCREATECONTAINERTIMEOUT@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/config/configuration-qemu-tdx.toml.in b/src/runtime/config/configuration-qemu-tdx.toml.in
index 5ec9c628dc2dc3ce90e36369918cd9e65f5e0626..122311f36fbf245883e982057b496ecd7c7b0a3a 100644
--- a/src/runtime/config/configuration-qemu-tdx.toml.in
+++ b/src/runtime/config/configuration-qemu-tdx.toml.in
@@ -676,3 +676,7 @@ create_container_timeout = @DEFCREATECONTAINERTIMEOUT@
 # to the hypervisor.
 # (default: /run/kata-containers/dans)
 dan_conf = "@DEFDANCONF@"
+
+# Enforce guest pull. This instructs the runtime to communicate to the agent via annotations that
+# the container image should be pulled in the guest, without using an external external snapshotter.
+# force_guest_pull = true
diff --git a/src/runtime/pkg/katautils/config.go b/src/runtime/pkg/katautils/config.go
index 0c1e211c576b21969d67b26d884f4ab94b9c9496..ae7b9cbb93a8dc4136d00f204237b5cb503a0352 100644
--- a/src/runtime/pkg/katautils/config.go
+++ b/src/runtime/pkg/katautils/config.go
@@ -193,6 +193,7 @@ type runtime struct {
 	DisableGuestEmptyDir      bool     `toml:"disable_guest_empty_dir"`
 	CreateContainerTimeout    uint64   `toml:"create_container_timeout"`
 	DanConf                   string   `toml:"dan_conf"`
+	ForceGuestPull            bool     `toml:"force_guest_pull"`
 }
 
 type agent struct {
@@ -1587,6 +1588,8 @@ func LoadConfiguration(configPath string, ignoreLogging bool) (resolvedConfigPat
 		return "", config, err
 	}
 
+	config.ForceGuestPull = tomlConf.Runtime.ForceGuestPull
+
 	return resolved, config, nil
 }
 
diff --git a/src/runtime/pkg/oci/utils.go b/src/runtime/pkg/oci/utils.go
index 372255a0ecdaae45a32362aa432103a4e38bd896..d49aabd9889fe2ed05f3d666564a2837e04952f5 100644
--- a/src/runtime/pkg/oci/utils.go
+++ b/src/runtime/pkg/oci/utils.go
@@ -171,6 +171,9 @@ type RuntimeConfig struct {
 
 	// Base directory of directly attachable network config
 	DanConfig string
+
+	// ForceGuestPull enforces guest pull independent of snapshotter annotations.
+	ForceGuestPull bool
 }
 
 // AddKernelParam allows the addition of new kernel parameters to an existing
@@ -1000,6 +1003,12 @@ func addRuntimeConfigOverrides(ocispec specs.Spec, sbConfig *vc.SandboxConfig, r
 		return err
 	}
 
+	if err := newAnnotationConfiguration(ocispec, vcAnnotations.ForceGuestPull).setBool(func(forceGuestPull bool) {
+		sbConfig.ForceGuestPull = forceGuestPull
+	}); err != nil {
+		return err
+	}
+
 	if err := newAnnotationConfiguration(ocispec, vcAnnotations.EnableVCPUsPinning).setBool(func(enableVCPUsPinning bool) {
 		sbConfig.EnableVCPUsPinning = enableVCPUsPinning
 	}); err != nil {
@@ -1145,6 +1154,8 @@ func SandboxConfig(ocispec specs.Spec, runtime RuntimeConfig, bundlePath, cid st
 		Experimental: runtime.Experimental,
 
 		CreateContainerTimeout: runtime.CreateContainerTimeout,
+
+		ForceGuestPull: runtime.ForceGuestPull,
 	}
 
 	if err := addAnnotations(ocispec, &sandboxConfig, runtime); err != nil {
diff --git a/src/runtime/virtcontainers/fs_share_linux.go b/src/runtime/virtcontainers/fs_share_linux.go
index b6d327a158eec7622b700890f19e68b5c50412ae..3599e618c2b2f96fe432d1ef9736142e8ba917a6 100644
--- a/src/runtime/virtcontainers/fs_share_linux.go
+++ b/src/runtime/virtcontainers/fs_share_linux.go
@@ -93,7 +93,7 @@ type FilesystemShare struct {
 	prepared bool
 }
 
-func NewFilesystemShare(s *Sandbox) (FilesystemSharer, error) {
+func NewFilesystemShare(s *Sandbox) (*FilesystemShare, error) {
 	watcher, err := fsnotify.NewWatcher()
 	if err != nil {
 		return nil, fmt.Errorf("Creating watcher returned error %w", err)
@@ -594,8 +594,29 @@ func (f *FilesystemShare) shareRootFilesystemWithErofs(ctx context.Context, c *C
 	}, nil
 }
 
+func forceGuestPull(c *Container) (*SharedFile, error) {
+	sf := &SharedFile{
+		guestPath: filepath.Join("/run/kata-containers/", c.id, c.rootfsSuffix),
+	}
+	guestPullVolume := &types.KataVirtualVolume{
+		VolumeType: types.KataVirtualVolumeImageGuestPullType,
+		ImagePull: &types.ImagePullVolume{
+			Metadata: map[string]string{},
+		},
+	}
+	vol, err := handleVirtualVolumeStorageObject(c, "", guestPullVolume)
+	if err != nil {
+		return nil, fmt.Errorf("forcing guest pull virtual volume: %w", err)
+	}
+	sf.containerStorages = append(sf.containerStorages, vol)
+	return sf, nil
+}
+
 // func (c *Container) shareRootfs(ctx context.Context) (*grpc.Storage, string, error) {
 func (f *FilesystemShare) ShareRootFilesystem(ctx context.Context, c *Container) (*SharedFile, error) {
+	if f.sandbox.IsGuestPullForced() {
+		return forceGuestPull(c)
+	}
 
 	if HasOptionPrefix(c.rootFs.Options, VirtualVolumePrefix) {
 		return f.shareRootFilesystemWithVirtualVolume(ctx, c)
diff --git a/src/runtime/virtcontainers/fs_share_linux_test.go b/src/runtime/virtcontainers/fs_share_linux_test.go
index 6b740d1e6eae15a781e325a7aefc6a7496f3e1ec..a6ea52d8eef600ec5d573ce641a48540018b7f71 100644
--- a/src/runtime/virtcontainers/fs_share_linux_test.go
+++ b/src/runtime/virtcontainers/fs_share_linux_test.go
@@ -14,6 +14,8 @@ import (
 	"syscall"
 	"testing"
 
+	"github.com/kata-containers/kata-containers/src/runtime/virtcontainers/pkg/agent/protocols/grpc"
+	specs "github.com/opencontainers/runtime-spec/specs-go"
 	"github.com/stretchr/testify/assert"
 )
 
@@ -96,3 +98,87 @@ func TestSandboxSharedFilesystem(t *testing.T) {
 	err = sandbox.fsShare.Cleanup(sandbox.ctx)
 	assert.NoError(err)
 }
+
+func TestShareRootFilesystem(t *testing.T) {
+	requireNewFilesystemShare := func(sandbox *Sandbox) *FilesystemShare {
+		fsShare, err := NewFilesystemShare(sandbox)
+		assert.NoError(t, err)
+		return fsShare
+	}
+
+	testCases := map[string]struct {
+		fsSharer       *FilesystemShare
+		container      *Container
+		wantErr        bool
+		wantSharedFile *SharedFile
+	}{
+		"force guest pull successful": {
+			fsSharer: requireNewFilesystemShare(&Sandbox{
+				config: &SandboxConfig{
+					ForceGuestPull: true,
+				},
+			}),
+			container: &Container{
+				id:           "container-id-abc",
+				rootfsSuffix: "test-suffix",
+				config: &ContainerConfig{
+					Annotations: map[string]string{
+						"io.kubernetes.cri.image-name": "test-image-name",
+					},
+					CustomSpec: &specs.Spec{
+						Annotations: map[string]string{
+							"io.kubernetes.cri.container-type": "",
+						},
+					},
+				},
+			},
+			wantSharedFile: &SharedFile{
+				containerStorages: []*grpc.Storage{{
+					Fstype:     "overlay",
+					Source:     "test-image-name",
+					MountPoint: "/run/kata-containers/container-id-abc/test-suffix",
+					Driver:     "image_guest_pull",
+					DriverOptions: []string{
+						"image_guest_pull={\"metadata\":{\"io.kubernetes.cri.image-name\":\"test-image-name\"}}",
+					},
+				}},
+				guestPath: "/run/kata-containers/container-id-abc/test-suffix",
+			},
+		},
+		"force guest pull image name missing": {
+			fsSharer: requireNewFilesystemShare(&Sandbox{
+				config: &SandboxConfig{
+					ForceGuestPull: true,
+				},
+			}),
+			container: &Container{
+				id:           "container-id-abc",
+				rootfsSuffix: "test-suffix",
+				config: &ContainerConfig{
+					Annotations: map[string]string{},
+					CustomSpec: &specs.Spec{
+						Annotations: map[string]string{
+							"io.kubernetes.cri.container-type": "",
+						},
+					},
+				},
+			},
+			wantErr: true,
+		},
+	}
+
+	for name, tc := range testCases {
+		t.Run(name, func(t *testing.T) {
+			assert := assert.New(t)
+
+			sharedFile, err := tc.fsSharer.ShareRootFilesystem(context.Background(), tc.container)
+			if tc.wantErr {
+				assert.Error(err)
+				return
+			}
+			assert.NoError(err)
+
+			assert.Equal(tc.wantSharedFile, sharedFile)
+		})
+	}
+}
diff --git a/src/runtime/virtcontainers/pkg/annotations/annotations.go b/src/runtime/virtcontainers/pkg/annotations/annotations.go
index 353daabdecaabdd058be18079adefbd525f1de65..e031447cb68d6e5e0ecf5dd6b5c92bb5e321b7ad 100644
--- a/src/runtime/virtcontainers/pkg/annotations/annotations.go
+++ b/src/runtime/virtcontainers/pkg/annotations/annotations.go
@@ -283,6 +283,9 @@ const (
 
 	// CreateContainerTimeout is a sandbox annotaion that sets the create container timeout.
 	CreateContainerTimeout = kataAnnotRuntimePrefix + "create_container_timeout"
+
+	// ForceGuestPull is a sandbox annotation that sets force_guest_pull.
+	ForceGuestPull = kataAnnotRuntimePrefix + "force_guest_pull"
 )
 
 // Agent related annotations
diff --git a/src/runtime/virtcontainers/sandbox.go b/src/runtime/virtcontainers/sandbox.go
index 773997b96b91432fcbb117a0354719bd3df25ea2..1169b3f7e151cf8874a8ea54ef7646a3abbec4f6 100644
--- a/src/runtime/virtcontainers/sandbox.go
+++ b/src/runtime/virtcontainers/sandbox.go
@@ -186,6 +186,9 @@ type SandboxConfig struct {
 	// Create container timeout which, if provided, indicates the create container timeout
 	// needed for the workload(s)
 	CreateContainerTimeout uint64
+
+	// ForceGuestPull enforces guest pull independent of snapshotter annotations.
+	ForceGuestPull bool
 }
 
 // valid checks that the sandbox configuration is valid.
@@ -448,6 +451,14 @@ func (s *Sandbox) IOStream(containerID, processID string) (io.WriteCloser, io.Re
 	return c.ioStream(processID)
 }
 
+// IsGuestPullEnforced returns true if guest pull is forced through the sandbox configuration.
+func (s *Sandbox) IsGuestPullForced() bool {
+	if s.config == nil {
+		return false
+	}
+	return s.config.ForceGuestPull
+}
+
 func createAssets(ctx context.Context, sandboxConfig *SandboxConfig) error {
 	span, _ := katatrace.Trace(ctx, nil, "createAssets", sandboxTracingTags, map[string]string{"sandbox_id": sandboxConfig.ID})
 	defer span.End()
