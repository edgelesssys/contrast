From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tom Dohrmann <erbse.13@gmx.de>
Date: Mon, 8 Jul 2024 07:51:20 +0000
Subject: [PATCH] runtime: agent: verify the agent policy hash

For TEE Guests that support the inclusion of immutable Host owned
data in their configuration (SNP HostData and TDX MRCONFIGID):

- runtime: attach the Agent Policy hash to these Guest VMs.
- agent: compute the hash of the Agent Policy and verify that it
  matches the TEE configuration data.

The hash value attached to the TEE will be included in the TEE
attestation reports. This allows an attestation service to verify that
the hash has the expected value, and therefore the Policy enforced by
the Agent has the expected contents.

Signed-off-by: Dan Mihai <dmihai@microsoft.com>
Signed-off-by: Tom Dohrmann <erbse.13@gmx.de>
---
 src/agent/Cargo.lock                          | 104 +++++++++-
 src/agent/policy/Cargo.toml                   |   5 +
 src/agent/policy/src/lib.rs                   |   3 +
 src/agent/policy/src/policy.rs                |  47 ++++-
 src/agent/policy/src/sev.rs                   |  19 ++
 src/agent/policy/src/tdx.rs                   | 194 ++++++++++++++++++
 src/runtime/pkg/govmm/qemu/qemu.go            |  17 +-
 src/runtime/virtcontainers/hypervisor.go      |   4 +
 src/runtime/virtcontainers/qemu.go            |   2 +-
 src/runtime/virtcontainers/qemu_amd64.go      |  39 +++-
 src/runtime/virtcontainers/qemu_amd64_test.go | 116 ++++++++++-
 src/runtime/virtcontainers/qemu_arch_base.go  |   4 +-
 src/runtime/virtcontainers/qemu_arm64.go      |   2 +-
 src/runtime/virtcontainers/qemu_arm64_test.go |  47 ++++-
 src/runtime/virtcontainers/qemu_ppc64le.go    |   2 +-
 .../virtcontainers/qemu_ppc64le_test.go       |  53 ++++-
 src/runtime/virtcontainers/qemu_s390x.go      |   2 +-
 src/runtime/virtcontainers/qemu_s390x_test.go |  51 ++++-
 src/runtime/virtcontainers/sandbox.go         |   1 +
 src/tools/genpolicy/Cargo.lock                | 143 ++++++++++++-
 20 files changed, 817 insertions(+), 38 deletions(-)
 create mode 100644 src/agent/policy/src/sev.rs
 create mode 100644 src/agent/policy/src/tdx.rs

diff --git a/src/agent/Cargo.lock b/src/agent/Cargo.lock
index c81667cf3c9fcca246633042315d73109a069fa7..673419f6bc801d9ef17753c3672fe8791651ebf5 100644
--- a/src/agent/Cargo.lock
+++ b/src/agent/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
@@ -631,6 +631,12 @@ version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"
 
+[[package]]
+name = "bitfield"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46afbd2983a5d5a7bd740ccb198caf5b82f45c40c09c0eed36052d91cb92e719"
+
 [[package]]
 name = "bitflags"
 version = "1.3.2"
@@ -1114,6 +1120,12 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "codicon"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "12170080f3533d6f09a19f81596f836854d0fa4867dc32c8172b8474b4e9de61"
+
 [[package]]
 name = "colorchoice"
 version = "1.0.3"
@@ -1640,6 +1652,15 @@ dependencies = [
  "subtle",
 ]
 
+[[package]]
+name = "dirs"
+version = "5.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225"
+dependencies = [
+ "dirs-sys",
+]
+
 [[package]]
 name = "dirs-next"
 version = "2.0.0"
@@ -1650,6 +1671,18 @@ dependencies = [
  "dirs-sys-next",
 ]
 
+[[package]]
+name = "dirs-sys"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c"
+dependencies = [
+ "libc",
+ "option-ext",
+ "redox_users",
+ "windows-sys 0.48.0",
+]
+
 [[package]]
 name = "dirs-sys-next"
 version = "0.1.2"
@@ -2782,6 +2815,12 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
+[[package]]
+name = "iocuddle"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d8972d5be69940353d5347a1344cb375d9b457d6809b428b05bb1ca2fb9ce007"
+
 [[package]]
 name = "iovec"
 version = "0.1.4"
@@ -3111,14 +3150,18 @@ dependencies = [
  "anyhow",
  "json-patch",
  "logging",
+ "nix 0.24.3",
  "regorus",
  "serde",
  "serde_json",
+ "sev",
+ "sha2",
  "slog",
  "slog-scope",
  "slog-term",
  "tokio",
  "tokio-vsock 0.3.4",
+ "vmm-sys-util",
 ]
 
 [[package]]
@@ -4126,6 +4169,12 @@ dependencies = [
  "tokio-stream",
 ]
 
+[[package]]
+name = "option-ext"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"
+
 [[package]]
 name = "ordered-stream"
 version = "0.2.0"
@@ -5693,6 +5742,15 @@ dependencies = [
  "syn 1.0.109",
 ]
 
+[[package]]
+name = "serde-big-array"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "11fc7cc2c76d73e0f27ee52abbd64eec84d46f370c88371120433196934e4b7f"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde-enum-str"
 version = "0.4.0"
@@ -5712,6 +5770,15 @@ version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "794e44574226fc701e3be5c651feb7939038fc67fb73f6f4dd5c4ba90fd3be70"
 
+[[package]]
+name = "serde_bytes"
+version = "0.11.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8437fd221bde2d4ca316d61b90e337e9e702b3820b87d63caa9ba6c02bd06d96"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
 version = "1.0.219"
@@ -5816,6 +5883,28 @@ dependencies = [
  "syn 1.0.109",
 ]
 
+[[package]]
+name = "sev"
+version = "2.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77e9de97c6e3c65e4e67997d48ad506d258da10edc10894277093da679441f23"
+dependencies = [
+ "bincode",
+ "bitfield",
+ "bitflags 1.3.2",
+ "codicon",
+ "dirs",
+ "hex",
+ "iocuddle",
+ "lazy_static",
+ "libc",
+ "serde",
+ "serde-big-array",
+ "serde_bytes",
+ "static_assertions",
+ "uuid",
+]
+
 [[package]]
 name = "sha1"
 version = "0.10.6"
@@ -6882,6 +6971,9 @@ name = "uuid"
 version = "1.15.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e0f540e3240398cce6128b64ba83fdbdd86129c16a3aa1a3a252efd66eb3d587"
+dependencies = [
+ "serde",
+]
 
 [[package]]
 name = "valuable"
@@ -6901,6 +6993,16 @@ version = "0.9.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"
 
+[[package]]
+name = "vmm-sys-util"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48b7b084231214f7427041e4220d77dfe726897a6d41fddee450696e66ff2a29"
+dependencies = [
+ "bitflags 1.3.2",
+ "libc",
+]
+
 [[package]]
 name = "vsock"
 version = "0.2.6"
diff --git a/src/agent/policy/Cargo.toml b/src/agent/policy/Cargo.toml
index 4bf98fb192907ef9735548edbcc9f28820248b72..f59c33d22bd0b48ff7d7eb6cc5be55da1ba44055 100644
--- a/src/agent/policy/Cargo.toml
+++ b/src/agent/policy/Cargo.toml
@@ -31,3 +31,8 @@ logging = { path = "../../libs/logging" }
 slog = "2.5.2"
 slog-scope = "4.1.2"
 slog-term = "2.9.0"
+
+sha2 = { version = "0.10.6" }
+sev = { version = "2.0.2", default-features = false, features = ["snp"] }
+nix = "0.24.2"
+vmm-sys-util = { version = "0.11.0" }
diff --git a/src/agent/policy/src/lib.rs b/src/agent/policy/src/lib.rs
index 994f67969ead99cd9debc62afd599c5eed6dcb70..724dc74e4032198c54b307ef27e97a15a2d08c9d 100644
--- a/src/agent/policy/src/lib.rs
+++ b/src/agent/policy/src/lib.rs
@@ -4,3 +4,6 @@
 //
 
 pub mod policy;
+
+mod sev;
+mod tdx;
diff --git a/src/agent/policy/src/policy.rs b/src/agent/policy/src/policy.rs
index 34f107385377e5f98ad0ab6f38f1854842ced4a2..5caf0c99c4484c46f9ae03f85228d674eef19c23 100644
--- a/src/agent/policy/src/policy.rs
+++ b/src/agent/policy/src/policy.rs
@@ -6,10 +6,14 @@
 
 //! Policy evaluation for the kata-agent.
 
-use anyhow::{bail, Result};
+use anyhow::{bail, ensure, Result};
 use slog::{debug, error, info, warn};
+use sha2::{Digest, Sha256};
 use tokio::io::AsyncWriteExt;
 
+use crate::sev::get_snp_host_data;
+use crate::tdx::get_tdx_mrconfigid;
+
 static POLICY_LOG_FILE: &str = "/tmp/policy.txt";
 static POLICY_DEFAULT_FILE: &str = "/etc/kata-opa/default-policy.rego";
 
@@ -194,6 +198,7 @@ impl AgentPolicy {
 
     /// Replace the Policy in regorus.
     pub async fn set_policy(&mut self, policy: &str) -> Result<()> {
+        verify_policy_digest(policy)?;
         self.engine = Self::new_engine();
         self.engine
             .add_policy("agent_policy".to_string(), policy.to_string())?;
@@ -241,3 +246,43 @@ impl AgentPolicy {
         Ok(())
     }
 }
+
+fn verify_policy_digest(policy: &str) -> Result<()> {
+    if let Ok(expected_digest) = get_tdx_mrconfigid() {
+        info!(sl!(), "policy: TDX MrConfigId ({:?})", expected_digest);
+
+        // The MrConfigId used with TDX is longer than the host-data field used
+        // with SNP, but we don't want to use different hashes for different
+        // platforms. Instead we truncate the MrConfigId to 256-bit and always
+        // use sha-256.
+        let (expected_digest, trailing_data) =
+            expected_digest.split_at(<Sha256 as Digest>::output_size());
+
+        ensure!(
+            trailing_data.iter().all(|&d| d == 0),
+            "hash isn't padded with zeros: MrConfigId={expected_digest:?}"
+        );
+
+        info!(sl!(), "policy: TDX expected digest ({:?})", expected_digest);
+        verify_sha_256(policy, expected_digest)
+    } else if let Ok(expected_digest) = get_snp_host_data() {
+        info!(sl!(), "policy: SNP expected digest ({:?})", expected_digest);
+        verify_sha_256(policy, expected_digest.as_slice())
+    } else {
+        bail!("couldn't find host data to verify the integrity of the policy");
+    }
+}
+
+pub fn verify_sha_256(policy: &str, expected_digest: &[u8]) -> Result<()> {
+    let mut hasher = Sha256::new();
+    hasher.update(policy.as_bytes());
+    let digest = hasher.finalize();
+    info!(sl!(), "policy: calculated digest ({:?})", digest);
+    ensure!(
+        expected_digest == digest.as_slice(),
+        "policy: rejecting unexpected digest ({:?}), expected ({:?})",
+        digest,
+        expected_digest
+    );
+    Ok(())
+}
diff --git a/src/agent/policy/src/sev.rs b/src/agent/policy/src/sev.rs
new file mode 100644
index 0000000000000000000000000000000000000000..3257eabafcc971df7219d71186383616ee19a672
--- /dev/null
+++ b/src/agent/policy/src/sev.rs
@@ -0,0 +1,19 @@
+// Copyright (c) 2023 Microsoft Corporation
+//
+// SPDX-License-Identifier: Apache-2.0
+//
+
+use anyhow::Result;
+
+pub fn get_snp_host_data() -> Result<Vec<u8>> {
+    match sev::firmware::guest::Firmware::open() {
+        Ok(mut firmware) => {
+            let report_data: [u8; 64] = [0; 64];
+            match firmware.get_report(None, Some(report_data), Some(0)) {
+                Ok(report) => Ok(report.host_data.to_vec()),
+                Err(e) => Err(e.into()),
+            }
+        }
+        Err(e) => Err(e.into()),
+    }
+}
diff --git a/src/agent/policy/src/tdx.rs b/src/agent/policy/src/tdx.rs
new file mode 100644
index 0000000000000000000000000000000000000000..1531e72a8b8db6e357d02ecdd431a9b88af3b30d
--- /dev/null
+++ b/src/agent/policy/src/tdx.rs
@@ -0,0 +1,194 @@
+// Copyright (c) 2023 Microsoft Corporation
+//
+// SPDX-License-Identifier: Apache-2.0
+//
+
+use anyhow::{bail, Result};
+use nix::fcntl::{self, OFlag};
+use nix::sys::stat::Mode;
+use std::os::fd::{AsRawFd, FromRawFd};
+use vmm_sys_util::ioctl::ioctl_with_val;
+use vmm_sys_util::{ioctl_ioc_nr, ioctl_iowr_nr};
+
+#[repr(C)]
+#[derive(Default)]
+/// Type header of TDREPORT_STRUCT.
+struct TdTransportType {
+    /// Type of the TDREPORT (0 - SGX, 81 - TDX, rest are reserved).
+    type_: u8,
+
+    /// Subtype of the TDREPORT (Default value is 0).
+    sub_type: u8,
+
+    /// TDREPORT version (Default value is 0).
+    version: u8,
+
+    /// Added for future extension.
+    reserved: u8,
+}
+
+#[repr(C)]
+/// TDX guest report data, MAC and TEE hashes.
+struct ReportMac {
+    /// TDREPORT type header.
+    type_: TdTransportType,
+
+    /// Reserved for future extension.
+    reserved1: [u8; 12],
+
+    /// CPU security version.
+    cpu_svn: [u8; 16],
+
+    /// SHA384 hash of TEE TCB INFO.
+    tee_tcb_info_hash: [u8; 48],
+
+    /// SHA384 hash of TDINFO_STRUCT.
+    tee_td_info_hash: [u8; 48],
+
+    /// User defined unique data passed in TDG.MR.REPORT request.
+    reportdata: [u8; 64],
+
+    /// Reserved for future extension.
+    reserved2: [u8; 32],
+
+    /// CPU MAC ID.
+    mac: [u8; 32],
+}
+
+impl Default for ReportMac {
+    fn default() -> Self {
+        Self {
+            type_: Default::default(),
+            reserved1: [0; 12],
+            cpu_svn: [0; 16],
+            tee_tcb_info_hash: [0; 48],
+            tee_td_info_hash: [0; 48],
+            reportdata: [0; 64],
+            reserved2: [0; 32],
+            mac: [0; 32],
+        }
+    }
+}
+
+#[repr(C)]
+#[derive(Default)]
+/// TDX guest measurements and configuration.
+struct TdInfo {
+    /// TDX Guest attributes (like debug, spet_disable, etc).
+    attr: [u8; 8],
+
+    /// Extended features allowed mask.
+    xfam: u64,
+
+    /// Build time measurement register.
+    mrtd: [u64; 6],
+
+    /// Software-defined ID for non-owner-defined configuration of the guest - e.g., run-time or OS configuration.
+    mrconfigid: [u64; 6],
+
+    /// Software-defined ID for the guest owner.
+    mrowner: [u64; 6],
+
+    /// Software-defined ID for owner-defined configuration of the guest - e.g., specific to the workload.
+    mrownerconfig: [u64; 6],
+
+    /// Run time measurement registers.
+    rtmr: [u64; 24],
+
+    /// For future extension.
+    reserved: [u64; 14],
+}
+
+#[repr(C)]
+/// Output of TDCALL[TDG.MR.REPORT].
+struct TdReport {
+    /// Mac protected header of size 256 bytes.
+    report_mac: ReportMac,
+
+    /// Additional attestable elements in the TCB are not reflected in the report_mac.
+    tee_tcb_info: [u8; 239],
+
+    /// Added for future extension.
+    reserved: [u8; 17],
+
+    /// Measurements and configuration data of size 512 bytes.
+    tdinfo: TdInfo,
+}
+
+impl Default for TdReport {
+    fn default() -> Self {
+        Self {
+            report_mac: Default::default(),
+            tee_tcb_info: [0; 239],
+            reserved: [0; 17],
+            tdinfo: Default::default(),
+        }
+    }
+}
+
+#[repr(C)]
+/// Request struct for TDX_CMD_GET_REPORT0 IOCTL.
+struct TdxReportReq {
+    /// User buffer with REPORTDATA to be included into TDREPORT.
+    /// Typically it can be some nonce provided by attestation, service,
+    /// so the generated TDREPORT can be uniquely verified.
+    reportdata: [u8; 64],
+
+    /// User buffer to store TDREPORT output from TDCALL[TDG.MR.REPORT].
+    tdreport: TdReport,
+}
+
+impl Default for TdxReportReq {
+    fn default() -> Self {
+        Self {
+            reportdata: [0; 64],
+            tdreport: Default::default(),
+        }
+    }
+}
+
+// Get TDREPORT0 (a.k.a. TDREPORT subtype 0) using TDCALL[TDG.MR.REPORT].
+ioctl_iowr_nr!(
+    TDX_CMD_GET_REPORT0,
+    'T' as ::std::os::raw::c_uint,
+    1,
+    TdxReportReq
+);
+
+pub fn get_tdx_mrconfigid() -> Result<Vec<u8>> {
+    let fd = {
+        let raw_fd = fcntl::open(
+            "/dev/tdx_guest",
+            OFlag::O_CLOEXEC | OFlag::O_RDWR | OFlag::O_SYNC,
+            Mode::empty(),
+        )?;
+        unsafe { std::fs::File::from_raw_fd(raw_fd) }
+    };
+
+    let mut req = TdxReportReq {
+        reportdata: [0; 64],
+        tdreport: Default::default(),
+    };
+    let ret = unsafe {
+        ioctl_with_val(
+            &fd.as_raw_fd(),
+            TDX_CMD_GET_REPORT0(),
+            &mut req as *mut TdxReportReq as std::os::raw::c_ulong,
+        )
+    };
+    if ret < 0 {
+        bail!(
+            "TDX_CMD_GET_REPORT0 failed: {:?}",
+            std::io::Error::last_os_error(),
+        );
+    }
+
+    let mrconfigid: Vec<u8> = req
+        .tdreport
+        .tdinfo
+        .mrconfigid
+        .iter()
+        .flat_map(|val| val.to_le_bytes())
+        .collect();
+    Ok(mrconfigid)
+}
diff --git a/src/runtime/pkg/govmm/qemu/qemu.go b/src/runtime/pkg/govmm/qemu/qemu.go
index 4ff4333f8c2cb3cc433602add779245fe4126b76..4b851137a8537520ccb53d2d2d0ba21face71f08 100644
--- a/src/runtime/pkg/govmm/qemu/qemu.go
+++ b/src/runtime/pkg/govmm/qemu/qemu.go
@@ -326,6 +326,11 @@ type Object struct {
 	// SnpIdAuth is the 4096-byte, base64-encoded blob to provide the ‘ID Authentication Information Structure’
 	// for the SNP_LAUNCH_FINISH command defined in the SEV-SNP firmware ABI (default: all-zero)
 	SnpIdAuth string
+
+	// TEEConfigData represents opaque binary data attached to a TEE and typically used
+	// for Guest attestation. This is only relevant for sev-snp-guest and tdx-guest
+	// objects and is encoded in the format expected by QEMU for each TEE type.
+	TEEConfigData string
 }
 
 // Valid returns true if the Object structure is valid and complete.
@@ -403,6 +408,9 @@ func (object Object) QemuParams(config *Config) []string {
 		if object.SnpIdAuth != "" {
 			objectParams = append(objectParams, fmt.Sprintf("id-auth=%s", object.SnpIdAuth))
 		}
+		if len(object.TEEConfigData) > 0 {
+			objectParams = append(objectParams, fmt.Sprintf("host-data=%s", object.TEEConfigData))
+		}
 		config.Bios = object.File
 	case SecExecGuest:
 		objectParams = append(objectParams, string(object.Type))
@@ -443,6 +451,7 @@ type SocketAddress struct {
 type TdxQomObject struct {
 	QomType               string        `json:"qom-type"`
 	Id                    string        `json:"id"`
+	SeptVEDisable         *bool         `json:"sept-ve-disable,omitempty"`
 	MrConfigId            string        `json:"mrconfigid,omitempty"`
 	MrOwner               string        `json:"mrowner,omitempty"`
 	MrOwnerConfig         string        `json:"mrownerconfig,omitempty"`
@@ -477,6 +486,7 @@ func prepareTDXObject(object Object) string {
 	tdxObject := TdxQomObject{
 		string(object.Type), // qom-type
 		object.ID,           // id
+		nil,                 // sept-ve-disable
 		"",                  // mrconfigid
 		"",                  // mrowner
 		"",                  // mrownerconfig
@@ -484,7 +494,12 @@ func prepareTDXObject(object Object) string {
 		nil}
 
 	if object.Debug {
-		*tdxObject.Debug = true
+		t := true
+		tdxObject.Debug = &t
+	}
+
+	if len(object.TEEConfigData) > 0 {
+		tdxObject.MrConfigId = object.TEEConfigData
 	}
 
 	return tdxObject.String()
diff --git a/src/runtime/virtcontainers/hypervisor.go b/src/runtime/virtcontainers/hypervisor.go
index b6b75d54998e011d7b263ddd1a2e6821a1df1e68..df297c9d2d4adc7b21ec989cfa46412ff59d9c30 100644
--- a/src/runtime/virtcontainers/hypervisor.go
+++ b/src/runtime/virtcontainers/hypervisor.go
@@ -687,6 +687,10 @@ type HypervisorConfig struct {
 	DefaultGPUs uint32
 	// DefaultGPUModel specifies GPU model like tesla, h100, readeon etc.
 	DefaultGPUModel string
+
+	// Policy text, for sandboxes created using a valid io.katacontainers.config.agent.policy
+	// annotation
+	AgentPolicy string
 }
 
 // vcpu mapping from vcpu number to thread number
diff --git a/src/runtime/virtcontainers/qemu.go b/src/runtime/virtcontainers/qemu.go
index 90721700086abc836fabc041da2dd17f0ae1c249..bfaa9bb6c9e6908352a51abf40068a69d33fc1b6 100644
--- a/src/runtime/virtcontainers/qemu.go
+++ b/src/runtime/virtcontainers/qemu.go
@@ -681,7 +681,7 @@ func (q *qemu) CreateVM(ctx context.Context, id string, network Network, hypervi
 		Debug:          hypervisorConfig.Debug,
 	}
 
-	qemuConfig.Devices, qemuConfig.Bios, err = q.arch.appendProtectionDevice(qemuConfig.Devices, firmwarePath, firmwareVolumePath)
+	qemuConfig.Devices, qemuConfig.Bios, err = q.arch.appendProtectionDevice(qemuConfig.Devices, firmwarePath, firmwareVolumePath, q.config.AgentPolicy)
 	if err != nil {
 		return err
 	}
diff --git a/src/runtime/virtcontainers/qemu_amd64.go b/src/runtime/virtcontainers/qemu_amd64.go
index 06d336edd52aae610406da14356058d7a552e33f..dccae8e02b196cf410d22dca4f8939cfb03467b2 100644
--- a/src/runtime/virtcontainers/qemu_amd64.go
+++ b/src/runtime/virtcontainers/qemu_amd64.go
@@ -9,6 +9,8 @@ package virtcontainers
 
 import (
 	"context"
+	"crypto/sha256"
+	"encoding/base64"
 	"fmt"
 	"time"
 
@@ -285,7 +287,7 @@ func (q *qemuAmd64) enableProtection() error {
 }
 
 // append protection device
-func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string) ([]govmmQemu.Device, string, error) {
+func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	if q.sgxEPCSize != 0 {
 		devices = append(devices,
 			govmmQemu.Object{
@@ -310,6 +312,7 @@ func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware,
 				Debug:          false,
 				File:           firmware,
 				FirmwareVolume: firmwareVolume,
+				TEEConfigData:  tdxMRCONFIGID(agentPolicy),
 			}), "", nil
 	case sevProtection:
 		return append(devices,
@@ -329,6 +332,7 @@ func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware,
 			File:            firmware,
 			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
 			ReducedPhysBits: 1,
+			TEEConfigData:   snpHostData(agentPolicy),
 		}
 		if q.snpIdBlock != "" && q.snpIdAuth != "" {
 			obj.SnpIdBlock = q.snpIdBlock
@@ -347,3 +351,36 @@ func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware,
 		return devices, "", fmt.Errorf("Unsupported guest protection technology: %v", q.protection)
 	}
 }
+
+// return the policy hash in the host-data format expected by QEMU for SEV-SNP.
+func snpHostData(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha256.New()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+	hvLogger.WithField("hash", hash).Info("policy hash")
+
+	encoded_hash := make([]byte, base64.StdEncoding.EncodedLen(len(hash)))
+	base64.StdEncoding.Encode(encoded_hash, hash)
+	return string(encoded_hash)
+}
+
+// return the policy hash in the mrconfigid format expected by QEMU for TDX.
+func tdxMRCONFIGID(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha256.New()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+	hvLogger.WithField("hash", hash).Info("policy hash")
+
+	// Pad the hash to 48-bytes.
+	mrConfigId := append(hash, (&[16]byte{})[:]...)
+
+	return base64.StdEncoding.EncodeToString(mrConfigId)
+}
diff --git a/src/runtime/virtcontainers/qemu_amd64_test.go b/src/runtime/virtcontainers/qemu_amd64_test.go
index 1425cb38cfd79ab06b04f1dafbab9b7440901688..f0a9c691a6ffc6356f8f9a335e72b81239a2ef2c 100644
--- a/src/runtime/virtcontainers/qemu_amd64_test.go
+++ b/src/runtime/virtcontainers/qemu_amd64_test.go
@@ -9,6 +9,10 @@ package virtcontainers
 
 import (
 	"context"
+	"crypto/sha256"
+	"crypto/sha512"
+	"encoding/base64"
+	"encoding/hex"
 	"fmt"
 	"os"
 	"testing"
@@ -247,6 +251,34 @@ func TestQemuAmd64Microvm(t *testing.T) {
 	assert.False(amd64.supportGuestMemoryHotplug())
 }
 
+// return the policy hash in the host-data format expected by QEMU for SEV-SNP.
+func testSnpHostData(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha256.New()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+
+	encoded_hash := make([]byte, base64.StdEncoding.EncodedLen(len(hash)))
+	base64.StdEncoding.Encode(encoded_hash, hash)
+	return string(encoded_hash)
+}
+
+// return the policy hash in the mrconfigid format expected by QEMU for TDX.
+func testTdxMRCONFIGID(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha512.New384()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+
+	return hex.EncodeToString(hash)
+}
+
 func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 	var devices []govmmQemu.Device
 	assert := assert.New(t)
@@ -255,30 +287,48 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 
 	id := amd64.(*qemuAmd64).devLoadersCount
 	firmware := "tdvf.fd"
+	policy := "package test1"
+	hostData := testSnpHostData(policy)
+	mrconfigid := testTdxMRCONFIGID(policy)
 	var bios string
 	var err error
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "")
-	assert.NoError(err)
 
 	// non-protection
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", "")
+	assert.NoError(err)
+	assert.NotEmpty(bios)
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", policy)
+	assert.NoError(err)
 	assert.NotEmpty(bios)
 
 	// pef protection
 	amd64.(*qemuAmd64).protection = pefProtection
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	amd64.(*qemuAmd64).protection = pefProtection
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", policy)
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// Secure Execution protection
 	amd64.(*qemuAmd64).protection = seProtection
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", policy)
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// sev protection
 	amd64.(*qemuAmd64).protection = sevProtection
 
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -295,10 +345,42 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 
 	assert.Equal(expectedOut, devices)
 
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", policy)
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Type:            govmmQemu.SEVGuest,
+			ID:              "sev",
+			Debug:           false,
+			File:            firmware,
+			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
+			ReducedPhysBits: 1,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
+
 	// snp protection
 	amd64.(*qemuAmd64).protection = snpProtection
 
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Type:            govmmQemu.SNPGuest,
+			ID:              "snp",
+			Debug:           false,
+			File:            firmware,
+			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
+			ReducedPhysBits: 1,
+		},
+	)
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", policy)
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -310,6 +392,7 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 			File:            firmware,
 			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
 			ReducedPhysBits: 1,
+			TEEConfigData:   hostData,
 		},
 	)
 
@@ -318,7 +401,7 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 	// tdxProtection
 	amd64.(*qemuAmd64).protection = tdxProtection
 
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -334,4 +417,23 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 	)
 
 	assert.Equal(expectedOut, devices)
+
+	id += 1
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", policy)
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Driver:        govmmQemu.Loader,
+			Type:          govmmQemu.TDXGuest,
+			ID:            "tdx",
+			DeviceID:      fmt.Sprintf("fd%d", id),
+			Debug:         false,
+			File:          firmware,
+			TEEConfigData: mrconfigid,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
 }
diff --git a/src/runtime/virtcontainers/qemu_arch_base.go b/src/runtime/virtcontainers/qemu_arch_base.go
index fe330d01a808a3a418a8eed2b54a448e22a1b86e..c99b7dfb2cedd3f8b458dfb26fb83f422a313016 100644
--- a/src/runtime/virtcontainers/qemu_arch_base.go
+++ b/src/runtime/virtcontainers/qemu_arch_base.go
@@ -165,7 +165,7 @@ type qemuArch interface {
 	// This implementation is architecture specific, some archs may need
 	// a firmware, returns a string containing the path to the firmware that should
 	// be used with the -bios option, ommit -bios option if the path is empty.
-	appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string) ([]govmmQemu.Device, string, error)
+	appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, agentPolicy string) ([]govmmQemu.Device, string, error)
 
 	// scans the PCIe space and returns the biggest BAR sizes for 32-bit
 	// and 64-bit addressable memory
@@ -920,7 +920,7 @@ func (q *qemuArchBase) setPFlash(p []string) {
 }
 
 // append protection device
-func (q *qemuArchBase) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string) ([]govmmQemu.Device, string, error) {
+func (q *qemuArchBase) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	hvLogger.WithField("arch", runtime.GOARCH).Warnf("Confidential Computing has not been implemented for this architecture")
 	return devices, firmware, nil
 }
diff --git a/src/runtime/virtcontainers/qemu_arm64.go b/src/runtime/virtcontainers/qemu_arm64.go
index a9b803f73275c1d5b9212a63fda097ebc33f1c9f..112fe358e4d76700ebe7a1d36e9ae42eb93611b7 100644
--- a/src/runtime/virtcontainers/qemu_arm64.go
+++ b/src/runtime/virtcontainers/qemu_arm64.go
@@ -154,7 +154,7 @@ func (q *qemuArm64) enableProtection() error {
 	return nil
 }
 
-func (q *qemuArm64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string) ([]govmmQemu.Device, string, error) {
+func (q *qemuArm64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	err := q.enableProtection()
 	if err != nil {
 		hvLogger.WithField("arch", runtime.GOARCH).Error(err)
diff --git a/src/runtime/virtcontainers/qemu_arm64_test.go b/src/runtime/virtcontainers/qemu_arm64_test.go
index 07e67ac8c1479c67f4b4ffa850dddb8d1e0680e4..8b6bd03eb9d10f0c37dbdbb3fb5fa48585659e96 100644
--- a/src/runtime/virtcontainers/qemu_arm64_test.go
+++ b/src/runtime/virtcontainers/qemu_arm64_test.go
@@ -182,42 +182,77 @@ func TestQemuArm64AppendProtectionDevice(t *testing.T) {
 	var err error
 
 	// no protection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "XYZ")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// PEF protection
 	arm64.(*qemuArm64).protection = pefProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "11111111111")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// Secure Execution protection
 	arm64.(*qemuArm64).protection = seProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "ABCD")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// SEV protection
 	arm64.(*qemuArm64).protection = sevProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// SNP protection
 	arm64.(*qemuArm64).protection = snpProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// TDX protection
 	arm64.(*qemuArm64).protection = tdxProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", "123456789012345678901234567890123456789012345678")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
diff --git a/src/runtime/virtcontainers/qemu_ppc64le.go b/src/runtime/virtcontainers/qemu_ppc64le.go
index d2e0228c8be8eae3ae24f3aa81b6423735f51320..ed7a14c4dc4262a0f1d77f6efa11310479fa1ecb 100644
--- a/src/runtime/virtcontainers/qemu_ppc64le.go
+++ b/src/runtime/virtcontainers/qemu_ppc64le.go
@@ -157,7 +157,7 @@ func (q *qemuPPC64le) enableProtection() error {
 }
 
 // append protection device
-func (q *qemuPPC64le) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string) ([]govmmQemu.Device, string, error) {
+func (q *qemuPPC64le) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	switch q.protection {
 	case pefProtection:
 		return append(devices,
diff --git a/src/runtime/virtcontainers/qemu_ppc64le_test.go b/src/runtime/virtcontainers/qemu_ppc64le_test.go
index 85e1dfe8050e3c64545e2031420058aad004f2ab..0c2f4b923d5550b67ad8c767124d8414b47d4c0b 100644
--- a/src/runtime/virtcontainers/qemu_ppc64le_test.go
+++ b/src/runtime/virtcontainers/qemu_ppc64le_test.go
@@ -60,39 +60,63 @@ func TestQemuPPC64leAppendProtectionDevice(t *testing.T) {
 	var devices []govmmQemu.Device
 	var bios, firmware string
 	var err error
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "")
-	assert.NoError(err)
 
 	//no protection
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "FOObar")
+	assert.NoError(err)
 	assert.Empty(bios)
 
 	//Secure Execution protection
 	ppc64le.(*qemuPPC64le).protection = seProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "adasawdq")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//SEV protection
 	ppc64le.(*qemuPPC64le).protection = sevProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//SNP protection
 	ppc64le.(*qemuPPC64le).protection = snpProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//TDX protection
 	ppc64le.(*qemuPPC64le).protection = tdxProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "123456789012345678901234567890123456789012345678")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//PEF protection
 	ppc64le.(*qemuPPC64le).protection = pefProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -107,4 +131,19 @@ func TestQemuPPC64leAppendProtectionDevice(t *testing.T) {
 	}
 	assert.Equal(expectedOut, devices)
 
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", "abc")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Driver:   govmmQemu.SpaprTPMProxy,
+			Type:     govmmQemu.PEFGuest,
+			ID:       pefID,
+			DeviceID: tpmID,
+			File:     tpmHostPath,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
 }
diff --git a/src/runtime/virtcontainers/qemu_s390x.go b/src/runtime/virtcontainers/qemu_s390x.go
index a333c3bb93db5849dbcd096d2a593bfaa45d2c5d..98c34689fc058e468ef284a9fdd5d4e66940aa89 100644
--- a/src/runtime/virtcontainers/qemu_s390x.go
+++ b/src/runtime/virtcontainers/qemu_s390x.go
@@ -344,7 +344,7 @@ func (q *qemuS390x) enableProtection() error {
 
 // appendProtectionDevice appends a QEMU object for Secure Execution.
 // Takes devices and returns updated version. Takes BIOS and returns it (no modification on s390x).
-func (q *qemuS390x) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string) ([]govmmQemu.Device, string, error) {
+func (q *qemuS390x) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	switch q.protection {
 	case seProtection:
 		return append(devices,
diff --git a/src/runtime/virtcontainers/qemu_s390x_test.go b/src/runtime/virtcontainers/qemu_s390x_test.go
index 24a67bdd9e591ead96fbaea473cb662526dedbf3..3f5f84afffeec6fed0ba624408158425090fe88a 100644
--- a/src/runtime/virtcontainers/qemu_s390x_test.go
+++ b/src/runtime/virtcontainers/qemu_s390x_test.go
@@ -111,40 +111,64 @@ func TestQemuS390xAppendProtectionDevice(t *testing.T) {
 	var devices []govmmQemu.Device
 	var bios, firmware string
 	var err error
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "")
-	assert.NoError(err)
 
 	// no protection
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "s390x_test")
+	assert.NoError(err)
 	assert.Empty(bios)
 
 	// PEF protection
 	s390x.(*qemuS390x).protection = pefProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "1234")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// TDX protection
 	s390x.(*qemuS390x).protection = tdxProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "123456789012345678901234567890123456789012345678")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// SEV protection
 	s390x.(*qemuS390x).protection = sevProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "")
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// SNP protection
 	s390x.(*qemuS390x).protection = snpProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	s390x.(*qemuS390x).protection = snpProtection
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// Secure Execution protection
 	s390x.(*qemuS390x).protection = seProtection
 
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "")
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -155,4 +179,17 @@ func TestQemuS390xAppendProtectionDevice(t *testing.T) {
 		},
 	}
 	assert.Equal(expectedOut, devices)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", "foo")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Type: govmmQemu.SecExecGuest,
+			ID:   secExecID,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
 }
diff --git a/src/runtime/virtcontainers/sandbox.go b/src/runtime/virtcontainers/sandbox.go
index b8b2fb54043b09f092e7d1dbe39cca981a4a27f2..ca872dc706a83d6541d31ce02d91058ea56d166b 100644
--- a/src/runtime/virtcontainers/sandbox.go
+++ b/src/runtime/virtcontainers/sandbox.go
@@ -613,6 +613,7 @@ func newSandbox(ctx context.Context, sandboxConfig SandboxConfig, factory Factor
 
 	sandboxConfig.HypervisorConfig.VMStorePath = s.store.RunVMStoragePath()
 	sandboxConfig.HypervisorConfig.RunStorePath = s.store.RunStoragePath()
+	sandboxConfig.HypervisorConfig.AgentPolicy = sandboxConfig.AgentConfig.Policy
 
 	spec := s.GetPatchedOCISpec()
 	if spec != nil && spec.Process.SelinuxLabel != "" {
diff --git a/src/tools/genpolicy/Cargo.lock b/src/tools/genpolicy/Cargo.lock
index 6c948b5c10253434e2d90a5b15a1d0b5c6f51bdd..e6dfc557e955d6451f2a0ce66e75e3c280354e04 100644
--- a/src/tools/genpolicy/Cargo.lock
+++ b/src/tools/genpolicy/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
@@ -148,6 +148,21 @@ version = "0.22.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
 
+[[package]]
+name = "bincode"
+version = "1.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad"
+dependencies = [
+ "serde",
+]
+
+[[package]]
+name = "bitfield"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46afbd2983a5d5a7bd740ccb198caf5b82f45c40c09c0eed36052d91cb92e719"
+
 [[package]]
 name = "bitflags"
 version = "1.3.2"
@@ -270,6 +285,12 @@ dependencies = [
  "cc",
 ]
 
+[[package]]
+name = "codicon"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "12170080f3533d6f09a19f81596f836854d0fa4867dc32c8172b8474b4e9de61"
+
 [[package]]
 name = "containerd-client"
 version = "0.4.0"
@@ -481,6 +502,15 @@ dependencies = [
  "subtle",
 ]
 
+[[package]]
+name = "dirs"
+version = "5.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225"
+dependencies = [
+ "dirs-sys",
+]
+
 [[package]]
 name = "dirs-next"
 version = "2.0.0"
@@ -491,6 +521,18 @@ dependencies = [
  "dirs-sys-next",
 ]
 
+[[package]]
+name = "dirs-sys"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c"
+dependencies = [
+ "libc",
+ "option-ext",
+ "redox_users",
+ "windows-sys 0.48.0",
+]
+
 [[package]]
 name = "dirs-sys-next"
 version = "0.1.2"
@@ -889,6 +931,12 @@ version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286"
 
+[[package]]
+name = "hex"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"
+
 [[package]]
 name = "hmac"
 version = "0.12.1"
@@ -1159,6 +1207,12 @@ dependencies = [
  "windows-sys 0.45.0",
 ]
 
+[[package]]
+name = "iocuddle"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d8972d5be69940353d5347a1344cb375d9b457d6809b428b05bb1ca2fb9ce007"
+
 [[package]]
 name = "iovec"
 version = "0.1.4"
@@ -1268,14 +1322,18 @@ dependencies = [
  "anyhow",
  "json-patch",
  "logging",
+ "nix 0.24.3",
  "regorus",
  "serde",
  "serde_json",
+ "sev",
+ "sha2",
  "slog",
  "slog-scope",
  "slog-term",
  "tokio",
  "tokio-vsock",
+ "vmm-sys-util",
 ]
 
 [[package]]
@@ -1463,6 +1521,18 @@ dependencies = [
  "memoffset 0.6.5",
 ]
 
+[[package]]
+name = "nix"
+version = "0.24.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069"
+dependencies = [
+ "bitflags 1.3.2",
+ "cfg-if",
+ "libc",
+ "memoffset 0.6.5",
+]
+
 [[package]]
 name = "nix"
 version = "0.26.4"
@@ -1613,6 +1683,12 @@ dependencies = [
  "vcpkg",
 ]
 
+[[package]]
+name = "option-ext"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"
+
 [[package]]
 name = "os_str_bytes"
 version = "6.4.1"
@@ -2247,6 +2323,15 @@ dependencies = [
  "serde_derive",
 ]
 
+[[package]]
+name = "serde-big-array"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "11fc7cc2c76d73e0f27ee52abbd64eec84d46f370c88371120433196934e4b7f"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde-transcode"
 version = "1.1.1"
@@ -2256,6 +2341,15 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "serde_bytes"
+version = "0.11.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8437fd221bde2d4ca316d61b90e337e9e702b3820b87d63caa9ba6c02bd06d96"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
 version = "1.0.210"
@@ -2312,6 +2406,28 @@ dependencies = [
  "yaml-rust",
 ]
 
+[[package]]
+name = "sev"
+version = "2.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77e9de97c6e3c65e4e67997d48ad506d258da10edc10894277093da679441f23"
+dependencies = [
+ "bincode",
+ "bitfield",
+ "bitflags 1.3.2",
+ "codicon",
+ "dirs",
+ "hex",
+ "iocuddle",
+ "lazy_static",
+ "libc",
+ "serde",
+ "serde-big-array",
+ "serde_bytes",
+ "static_assertions",
+ "uuid",
+]
+
 [[package]]
 name = "sha2"
 version = "0.10.6"
@@ -2421,6 +2537,12 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
+[[package]]
+name = "static_assertions"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"
+
 [[package]]
 name = "strsim"
 version = "0.10.0"
@@ -2940,6 +3062,15 @@ dependencies = [
  "percent-encoding",
 ]
 
+[[package]]
+name = "uuid"
+version = "1.16.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "458f7a779bf54acc9f347480ac654f68407d3aab21269a6e3c9f922acd9e2da9"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "vcpkg"
 version = "0.2.15"
@@ -2952,6 +3083,16 @@ version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
 
+[[package]]
+name = "vmm-sys-util"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48b7b084231214f7427041e4220d77dfe726897a6d41fddee450696e66ff2a29"
+dependencies = [
+ "bitflags 1.3.2",
+ "libc",
+]
+
 [[package]]
 name = "vsock"
 version = "0.2.6"
