From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tom Dohrmann <erbse.13@gmx.de>
Date: Mon, 8 Jul 2024 07:51:20 +0000
Subject: [PATCH] runtime: agent: verify the agent policy hash

For TEE Guests that support the inclusion of immutable Host owned
data in their configuration (SNP HostData and TDX MRCONFIGID):

- runtime: attach the Agent Policy hash to these Guest VMs.
- agent: compute the hash of the Agent Policy and verify that it
  matches the TEE configuration data.

The hash value attached to the TEE will be included in the TEE
attestation reports. This allows an attestation service to verify that
the hash has the expected value, and therefore the Policy enforced by
the Agent has the expected contents.

Signed-off-by: Dan Mihai <dmihai@microsoft.com>
Signed-off-by: Tom Dohrmann <erbse.13@gmx.de>
---
 src/agent/Cargo.lock                          | 108 +++++++++-
 src/agent/policy/Cargo.toml                   |   5 +
 src/agent/policy/src/lib.rs                   |   3 +
 src/agent/policy/src/policy.rs                |  47 ++++-
 src/agent/policy/src/sev.rs                   |  19 ++
 src/agent/policy/src/tdx.rs                   | 194 ++++++++++++++++++
 src/runtime/pkg/govmm/qemu/qemu.go            |  17 +-
 src/runtime/virtcontainers/hypervisor.go      |   4 +
 src/runtime/virtcontainers/qemu.go            |   2 +-
 src/runtime/virtcontainers/qemu_amd64.go      |  39 +++-
 src/runtime/virtcontainers/qemu_amd64_test.go | 129 ++++++++++--
 src/runtime/virtcontainers/qemu_arch_base.go  |   4 +-
 src/runtime/virtcontainers/qemu_arm64.go      |   2 +-
 src/runtime/virtcontainers/qemu_arm64_test.go |  47 ++++-
 src/runtime/virtcontainers/qemu_ppc64le.go    |   2 +-
 .../virtcontainers/qemu_ppc64le_test.go       |  33 ++-
 src/runtime/virtcontainers/qemu_s390x.go      |   2 +-
 src/runtime/virtcontainers/qemu_s390x_test.go |  51 ++++-
 src/runtime/virtcontainers/sandbox.go         |   1 +
 src/tools/genpolicy/Cargo.lock                | 179 +++++++++++++++-
 20 files changed, 840 insertions(+), 48 deletions(-)
 create mode 100644 src/agent/policy/src/sev.rs
 create mode 100644 src/agent/policy/src/tdx.rs

diff --git a/src/agent/Cargo.lock b/src/agent/Cargo.lock
index 6b7829f0c4878d7238f82c035b4d2f1a19cb7f9d..09141837350fa55a3d2ebf7a97954b8141eca8f9 100644
--- a/src/agent/Cargo.lock
+++ b/src/agent/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
@@ -644,6 +644,12 @@ version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"
 
+[[package]]
+name = "bitfield"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46afbd2983a5d5a7bd740ccb198caf5b82f45c40c09c0eed36052d91cb92e719"
+
 [[package]]
 name = "bitflags"
 version = "1.3.2"
@@ -1130,6 +1136,12 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "codicon"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "12170080f3533d6f09a19f81596f836854d0fa4867dc32c8172b8474b4e9de61"
+
 [[package]]
 name = "colorchoice"
 version = "1.0.3"
@@ -1622,6 +1634,15 @@ dependencies = [
  "subtle",
 ]
 
+[[package]]
+name = "dirs"
+version = "5.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225"
+dependencies = [
+ "dirs-sys",
+]
+
 [[package]]
 name = "dirs-next"
 version = "2.0.0"
@@ -1632,6 +1653,18 @@ dependencies = [
  "dirs-sys-next",
 ]
 
+[[package]]
+name = "dirs-sys"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c"
+dependencies = [
+ "libc",
+ "option-ext",
+ "redox_users",
+ "windows-sys 0.48.0",
+]
+
 [[package]]
 name = "dirs-sys-next"
 version = "0.1.2"
@@ -2783,6 +2816,12 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
+[[package]]
+name = "iocuddle"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d8972d5be69940353d5347a1344cb375d9b457d6809b428b05bb1ca2fb9ce007"
+
 [[package]]
 name = "iovec"
 version = "0.1.4"
@@ -3116,12 +3155,16 @@ version = "0.1.0"
 dependencies = [
  "anyhow",
  "json-patch",
+ "nix 0.24.3",
  "regorus",
  "serde",
  "serde_json",
+ "sev",
+ "sha2",
  "slog",
  "slog-scope",
  "tokio",
+ "vmm-sys-util",
 ]
 
 [[package]]
@@ -3401,7 +3444,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34"
 dependencies = [
  "cfg-if",
- "windows-targets 0.48.5",
+ "windows-targets 0.52.6",
 ]
 
 [[package]]
@@ -4210,6 +4253,12 @@ dependencies = [
  "tokio-stream",
 ]
 
+[[package]]
+name = "option-ext"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"
+
 [[package]]
 name = "ordered-stream"
 version = "0.2.0"
@@ -5861,6 +5910,15 @@ dependencies = [
  "syn 1.0.109",
 ]
 
+[[package]]
+name = "serde-big-array"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "11fc7cc2c76d73e0f27ee52abbd64eec84d46f370c88371120433196934e4b7f"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde-enum-str"
 version = "0.4.0"
@@ -5880,6 +5938,15 @@ version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "794e44574226fc701e3be5c651feb7939038fc67fb73f6f4dd5c4ba90fd3be70"
 
+[[package]]
+name = "serde_bytes"
+version = "0.11.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8437fd221bde2d4ca316d61b90e337e9e702b3820b87d63caa9ba6c02bd06d96"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
 version = "1.0.219"
@@ -6000,6 +6067,28 @@ dependencies = [
  "syn 1.0.109",
 ]
 
+[[package]]
+name = "sev"
+version = "2.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77e9de97c6e3c65e4e67997d48ad506d258da10edc10894277093da679441f23"
+dependencies = [
+ "bincode",
+ "bitfield",
+ "bitflags 1.3.2",
+ "codicon",
+ "dirs",
+ "hex",
+ "iocuddle",
+ "lazy_static",
+ "libc",
+ "serde",
+ "serde-big-array",
+ "serde_bytes",
+ "static_assertions",
+ "uuid",
+]
+
 [[package]]
 name = "sha1"
 version = "0.10.6"
@@ -7109,6 +7198,9 @@ name = "uuid"
 version = "1.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "458f7a779bf54acc9f347480ac654f68407d3aab21269a6e3c9f922acd9e2da9"
+dependencies = [
+ "serde",
+]
 
 [[package]]
 name = "valuable"
@@ -7128,6 +7220,16 @@ version = "0.9.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"
 
+[[package]]
+name = "vmm-sys-util"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48b7b084231214f7427041e4220d77dfe726897a6d41fddee450696e66ff2a29"
+dependencies = [
+ "bitflags 1.3.2",
+ "libc",
+]
+
 [[package]]
 name = "vsock"
 version = "0.2.6"
@@ -7385,7 +7487,7 @@ version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb"
 dependencies = [
- "windows-sys 0.48.0",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
diff --git a/src/agent/policy/Cargo.toml b/src/agent/policy/Cargo.toml
index d31773ab7839450732b0d45d2fa9bec0d60da19f..9b595c04cd22a9630990c501eff161c8a8b1724f 100644
--- a/src/agent/policy/Cargo.toml
+++ b/src/agent/policy/Cargo.toml
@@ -28,3 +28,8 @@ json-patch = "2.0.0"
 # to be modified at runtime.
 slog.workspace = true
 slog-scope.workspace = true
+
+sha2 = { version = "0.10.6" }
+sev = { version = "2.0.2", default-features = false, features = ["snp"] }
+nix = "0.24.2"
+vmm-sys-util = { version = "0.11.0" }
diff --git a/src/agent/policy/src/lib.rs b/src/agent/policy/src/lib.rs
index 994f67969ead99cd9debc62afd599c5eed6dcb70..724dc74e4032198c54b307ef27e97a15a2d08c9d 100644
--- a/src/agent/policy/src/lib.rs
+++ b/src/agent/policy/src/lib.rs
@@ -4,3 +4,6 @@
 //
 
 pub mod policy;
+
+mod sev;
+mod tdx;
diff --git a/src/agent/policy/src/policy.rs b/src/agent/policy/src/policy.rs
index 34f107385377e5f98ad0ab6f38f1854842ced4a2..5caf0c99c4484c46f9ae03f85228d674eef19c23 100644
--- a/src/agent/policy/src/policy.rs
+++ b/src/agent/policy/src/policy.rs
@@ -6,10 +6,14 @@
 
 //! Policy evaluation for the kata-agent.
 
-use anyhow::{bail, Result};
+use anyhow::{bail, ensure, Result};
 use slog::{debug, error, info, warn};
+use sha2::{Digest, Sha256};
 use tokio::io::AsyncWriteExt;
 
+use crate::sev::get_snp_host_data;
+use crate::tdx::get_tdx_mrconfigid;
+
 static POLICY_LOG_FILE: &str = "/tmp/policy.txt";
 static POLICY_DEFAULT_FILE: &str = "/etc/kata-opa/default-policy.rego";
 
@@ -194,6 +198,7 @@ impl AgentPolicy {
 
     /// Replace the Policy in regorus.
     pub async fn set_policy(&mut self, policy: &str) -> Result<()> {
+        verify_policy_digest(policy)?;
         self.engine = Self::new_engine();
         self.engine
             .add_policy("agent_policy".to_string(), policy.to_string())?;
@@ -241,3 +246,43 @@ impl AgentPolicy {
         Ok(())
     }
 }
+
+fn verify_policy_digest(policy: &str) -> Result<()> {
+    if let Ok(expected_digest) = get_tdx_mrconfigid() {
+        info!(sl!(), "policy: TDX MrConfigId ({:?})", expected_digest);
+
+        // The MrConfigId used with TDX is longer than the host-data field used
+        // with SNP, but we don't want to use different hashes for different
+        // platforms. Instead we truncate the MrConfigId to 256-bit and always
+        // use sha-256.
+        let (expected_digest, trailing_data) =
+            expected_digest.split_at(<Sha256 as Digest>::output_size());
+
+        ensure!(
+            trailing_data.iter().all(|&d| d == 0),
+            "hash isn't padded with zeros: MrConfigId={expected_digest:?}"
+        );
+
+        info!(sl!(), "policy: TDX expected digest ({:?})", expected_digest);
+        verify_sha_256(policy, expected_digest)
+    } else if let Ok(expected_digest) = get_snp_host_data() {
+        info!(sl!(), "policy: SNP expected digest ({:?})", expected_digest);
+        verify_sha_256(policy, expected_digest.as_slice())
+    } else {
+        bail!("couldn't find host data to verify the integrity of the policy");
+    }
+}
+
+pub fn verify_sha_256(policy: &str, expected_digest: &[u8]) -> Result<()> {
+    let mut hasher = Sha256::new();
+    hasher.update(policy.as_bytes());
+    let digest = hasher.finalize();
+    info!(sl!(), "policy: calculated digest ({:?})", digest);
+    ensure!(
+        expected_digest == digest.as_slice(),
+        "policy: rejecting unexpected digest ({:?}), expected ({:?})",
+        digest,
+        expected_digest
+    );
+    Ok(())
+}
diff --git a/src/agent/policy/src/sev.rs b/src/agent/policy/src/sev.rs
new file mode 100644
index 0000000000000000000000000000000000000000..3257eabafcc971df7219d71186383616ee19a672
--- /dev/null
+++ b/src/agent/policy/src/sev.rs
@@ -0,0 +1,19 @@
+// Copyright (c) 2023 Microsoft Corporation
+//
+// SPDX-License-Identifier: Apache-2.0
+//
+
+use anyhow::Result;
+
+pub fn get_snp_host_data() -> Result<Vec<u8>> {
+    match sev::firmware::guest::Firmware::open() {
+        Ok(mut firmware) => {
+            let report_data: [u8; 64] = [0; 64];
+            match firmware.get_report(None, Some(report_data), Some(0)) {
+                Ok(report) => Ok(report.host_data.to_vec()),
+                Err(e) => Err(e.into()),
+            }
+        }
+        Err(e) => Err(e.into()),
+    }
+}
diff --git a/src/agent/policy/src/tdx.rs b/src/agent/policy/src/tdx.rs
new file mode 100644
index 0000000000000000000000000000000000000000..1531e72a8b8db6e357d02ecdd431a9b88af3b30d
--- /dev/null
+++ b/src/agent/policy/src/tdx.rs
@@ -0,0 +1,194 @@
+// Copyright (c) 2023 Microsoft Corporation
+//
+// SPDX-License-Identifier: Apache-2.0
+//
+
+use anyhow::{bail, Result};
+use nix::fcntl::{self, OFlag};
+use nix::sys::stat::Mode;
+use std::os::fd::{AsRawFd, FromRawFd};
+use vmm_sys_util::ioctl::ioctl_with_val;
+use vmm_sys_util::{ioctl_ioc_nr, ioctl_iowr_nr};
+
+#[repr(C)]
+#[derive(Default)]
+/// Type header of TDREPORT_STRUCT.
+struct TdTransportType {
+    /// Type of the TDREPORT (0 - SGX, 81 - TDX, rest are reserved).
+    type_: u8,
+
+    /// Subtype of the TDREPORT (Default value is 0).
+    sub_type: u8,
+
+    /// TDREPORT version (Default value is 0).
+    version: u8,
+
+    /// Added for future extension.
+    reserved: u8,
+}
+
+#[repr(C)]
+/// TDX guest report data, MAC and TEE hashes.
+struct ReportMac {
+    /// TDREPORT type header.
+    type_: TdTransportType,
+
+    /// Reserved for future extension.
+    reserved1: [u8; 12],
+
+    /// CPU security version.
+    cpu_svn: [u8; 16],
+
+    /// SHA384 hash of TEE TCB INFO.
+    tee_tcb_info_hash: [u8; 48],
+
+    /// SHA384 hash of TDINFO_STRUCT.
+    tee_td_info_hash: [u8; 48],
+
+    /// User defined unique data passed in TDG.MR.REPORT request.
+    reportdata: [u8; 64],
+
+    /// Reserved for future extension.
+    reserved2: [u8; 32],
+
+    /// CPU MAC ID.
+    mac: [u8; 32],
+}
+
+impl Default for ReportMac {
+    fn default() -> Self {
+        Self {
+            type_: Default::default(),
+            reserved1: [0; 12],
+            cpu_svn: [0; 16],
+            tee_tcb_info_hash: [0; 48],
+            tee_td_info_hash: [0; 48],
+            reportdata: [0; 64],
+            reserved2: [0; 32],
+            mac: [0; 32],
+        }
+    }
+}
+
+#[repr(C)]
+#[derive(Default)]
+/// TDX guest measurements and configuration.
+struct TdInfo {
+    /// TDX Guest attributes (like debug, spet_disable, etc).
+    attr: [u8; 8],
+
+    /// Extended features allowed mask.
+    xfam: u64,
+
+    /// Build time measurement register.
+    mrtd: [u64; 6],
+
+    /// Software-defined ID for non-owner-defined configuration of the guest - e.g., run-time or OS configuration.
+    mrconfigid: [u64; 6],
+
+    /// Software-defined ID for the guest owner.
+    mrowner: [u64; 6],
+
+    /// Software-defined ID for owner-defined configuration of the guest - e.g., specific to the workload.
+    mrownerconfig: [u64; 6],
+
+    /// Run time measurement registers.
+    rtmr: [u64; 24],
+
+    /// For future extension.
+    reserved: [u64; 14],
+}
+
+#[repr(C)]
+/// Output of TDCALL[TDG.MR.REPORT].
+struct TdReport {
+    /// Mac protected header of size 256 bytes.
+    report_mac: ReportMac,
+
+    /// Additional attestable elements in the TCB are not reflected in the report_mac.
+    tee_tcb_info: [u8; 239],
+
+    /// Added for future extension.
+    reserved: [u8; 17],
+
+    /// Measurements and configuration data of size 512 bytes.
+    tdinfo: TdInfo,
+}
+
+impl Default for TdReport {
+    fn default() -> Self {
+        Self {
+            report_mac: Default::default(),
+            tee_tcb_info: [0; 239],
+            reserved: [0; 17],
+            tdinfo: Default::default(),
+        }
+    }
+}
+
+#[repr(C)]
+/// Request struct for TDX_CMD_GET_REPORT0 IOCTL.
+struct TdxReportReq {
+    /// User buffer with REPORTDATA to be included into TDREPORT.
+    /// Typically it can be some nonce provided by attestation, service,
+    /// so the generated TDREPORT can be uniquely verified.
+    reportdata: [u8; 64],
+
+    /// User buffer to store TDREPORT output from TDCALL[TDG.MR.REPORT].
+    tdreport: TdReport,
+}
+
+impl Default for TdxReportReq {
+    fn default() -> Self {
+        Self {
+            reportdata: [0; 64],
+            tdreport: Default::default(),
+        }
+    }
+}
+
+// Get TDREPORT0 (a.k.a. TDREPORT subtype 0) using TDCALL[TDG.MR.REPORT].
+ioctl_iowr_nr!(
+    TDX_CMD_GET_REPORT0,
+    'T' as ::std::os::raw::c_uint,
+    1,
+    TdxReportReq
+);
+
+pub fn get_tdx_mrconfigid() -> Result<Vec<u8>> {
+    let fd = {
+        let raw_fd = fcntl::open(
+            "/dev/tdx_guest",
+            OFlag::O_CLOEXEC | OFlag::O_RDWR | OFlag::O_SYNC,
+            Mode::empty(),
+        )?;
+        unsafe { std::fs::File::from_raw_fd(raw_fd) }
+    };
+
+    let mut req = TdxReportReq {
+        reportdata: [0; 64],
+        tdreport: Default::default(),
+    };
+    let ret = unsafe {
+        ioctl_with_val(
+            &fd.as_raw_fd(),
+            TDX_CMD_GET_REPORT0(),
+            &mut req as *mut TdxReportReq as std::os::raw::c_ulong,
+        )
+    };
+    if ret < 0 {
+        bail!(
+            "TDX_CMD_GET_REPORT0 failed: {:?}",
+            std::io::Error::last_os_error(),
+        );
+    }
+
+    let mrconfigid: Vec<u8> = req
+        .tdreport
+        .tdinfo
+        .mrconfigid
+        .iter()
+        .flat_map(|val| val.to_le_bytes())
+        .collect();
+    Ok(mrconfigid)
+}
diff --git a/src/runtime/pkg/govmm/qemu/qemu.go b/src/runtime/pkg/govmm/qemu/qemu.go
index 86a70e441a1c8d6a9b179dded20a358f85f263d2..ac45c95c5f4b56e3821e637e0639b0a387301616 100644
--- a/src/runtime/pkg/govmm/qemu/qemu.go
+++ b/src/runtime/pkg/govmm/qemu/qemu.go
@@ -332,6 +332,11 @@ type Object struct {
 
 	// Raw byte slice of initdata digest
 	InitdataDigest []byte
+
+	// TEEConfigData represents opaque binary data attached to a TEE and typically used
+	// for Guest attestation. This is only relevant for sev-snp-guest and tdx-guest
+	// objects and is encoded in the format expected by QEMU for each TEE type.
+	TEEConfigData string
 }
 
 // Valid returns true if the Object structure is valid and complete.
@@ -423,6 +428,9 @@ func (object Object) QemuParams(config *Config) []string {
 		if object.SnpIdAuth != "" {
 			objectParams = append(objectParams, fmt.Sprintf("id-auth=%s", object.SnpIdAuth))
 		}
+		if len(object.TEEConfigData) > 0 {
+			objectParams = append(objectParams, fmt.Sprintf("host-data=%s", object.TEEConfigData))
+		}
 		config.Bios = object.File
 	case SecExecGuest:
 		objectParams = append(objectParams, string(object.Type))
@@ -464,6 +472,7 @@ type SocketAddress struct {
 type TdxQomObject struct {
 	QomType               string        `json:"qom-type"`
 	Id                    string        `json:"id"`
+	SeptVEDisable         *bool         `json:"sept-ve-disable,omitempty"`
 	MrConfigId            string        `json:"mrconfigid,omitempty"`
 	MrOwner               string        `json:"mrowner,omitempty"`
 	MrOwnerConfig         string        `json:"mrownerconfig,omitempty"`
@@ -517,6 +526,7 @@ func prepareTDXObject(object Object) string {
 	tdxObject := TdxQomObject{
 		string(object.Type), // qom-type
 		object.ID,           // id
+		nil,                 // sept-ve-disable
 		mrconfigid,          // mrconfigid
 		"",                  // mrowner
 		"",                  // mrownerconfig
@@ -524,7 +534,12 @@ func prepareTDXObject(object Object) string {
 		nil}
 
 	if object.Debug {
-		*tdxObject.Debug = true
+		t := true
+		tdxObject.Debug = &t
+	}
+
+	if len(object.TEEConfigData) > 0 {
+		tdxObject.MrConfigId = object.TEEConfigData
 	}
 
 	return tdxObject.String()
diff --git a/src/runtime/virtcontainers/hypervisor.go b/src/runtime/virtcontainers/hypervisor.go
index 22423ab1220f1b08afa69363b59535896628cea4..8b6f3659436f9f74c0c5235a6b9807cf60cfdb43 100644
--- a/src/runtime/virtcontainers/hypervisor.go
+++ b/src/runtime/virtcontainers/hypervisor.go
@@ -702,6 +702,10 @@ type HypervisorConfig struct {
 	DefaultGPUs uint32
 	// DefaultGPUModel specifies GPU model like tesla, h100, readeon etc.
 	DefaultGPUModel string
+
+	// Policy text, for sandboxes created using a valid io.katacontainers.config.agent.policy
+	// annotation
+	AgentPolicy string
 }
 
 // vcpu mapping from vcpu number to thread number
diff --git a/src/runtime/virtcontainers/qemu.go b/src/runtime/virtcontainers/qemu.go
index 51a46d2729dd372df9f8037f5d602b8cc8d09ec3..1020852ed976058ae93e9751885aa3d49ee3da93 100644
--- a/src/runtime/virtcontainers/qemu.go
+++ b/src/runtime/virtcontainers/qemu.go
@@ -797,7 +797,7 @@ func (q *qemu) CreateVM(ctx context.Context, id string, network Network, hypervi
 		Debug:          hypervisorConfig.Debug,
 	}
 
-	qemuConfig.Devices, qemuConfig.Bios, err = q.arch.appendProtectionDevice(qemuConfig.Devices, firmwarePath, firmwareVolumePath, hypervisorConfig.InitdataDigest)
+	qemuConfig.Devices, qemuConfig.Bios, err = q.arch.appendProtectionDevice(qemuConfig.Devices, firmwarePath, firmwareVolumePath, hypervisorConfig.InitdataDigest, q.config.AgentPolicy)
 	if err != nil {
 		return err
 	}
diff --git a/src/runtime/virtcontainers/qemu_amd64.go b/src/runtime/virtcontainers/qemu_amd64.go
index 7b4dfb975d555224290be7c5c47e5cf5e33c2760..8fd357fa60e8fb6a22ed09dc8f4f5aa92584cf05 100644
--- a/src/runtime/virtcontainers/qemu_amd64.go
+++ b/src/runtime/virtcontainers/qemu_amd64.go
@@ -9,6 +9,8 @@ package virtcontainers
 
 import (
 	"context"
+	"crypto/sha256"
+	"encoding/base64"
 	"fmt"
 	"time"
 
@@ -280,7 +282,7 @@ func (q *qemuAmd64) enableProtection() error {
 }
 
 // append protection device
-func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte) ([]govmmQemu.Device, string, error) {
+func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	if q.sgxEPCSize != 0 {
 		devices = append(devices,
 			govmmQemu.Object{
@@ -306,6 +308,7 @@ func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware,
 				File:           firmware,
 				FirmwareVolume: firmwareVolume,
 				InitdataDigest: initdataDigest,
+				TEEConfigData:  tdxMRCONFIGID(agentPolicy),
 			}), "", nil
 	case sevProtection:
 		return append(devices,
@@ -326,6 +329,7 @@ func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware,
 			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
 			ReducedPhysBits: 1,
 			InitdataDigest:  initdataDigest,
+			TEEConfigData:   snpHostData(agentPolicy),
 		}
 		if q.snpIdBlock != "" && q.snpIdAuth != "" {
 			obj.SnpIdBlock = q.snpIdBlock
@@ -344,3 +348,36 @@ func (q *qemuAmd64) appendProtectionDevice(devices []govmmQemu.Device, firmware,
 		return devices, "", fmt.Errorf("Unsupported guest protection technology: %v", q.protection)
 	}
 }
+
+// return the policy hash in the host-data format expected by QEMU for SEV-SNP.
+func snpHostData(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha256.New()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+	hvLogger.WithField("hash", hash).Info("policy hash")
+
+	encoded_hash := make([]byte, base64.StdEncoding.EncodedLen(len(hash)))
+	base64.StdEncoding.Encode(encoded_hash, hash)
+	return string(encoded_hash)
+}
+
+// return the policy hash in the mrconfigid format expected by QEMU for TDX.
+func tdxMRCONFIGID(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha256.New()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+	hvLogger.WithField("hash", hash).Info("policy hash")
+
+	// Pad the hash to 48-bytes.
+	mrConfigId := append(hash, (&[16]byte{})[:]...)
+
+	return base64.StdEncoding.EncodeToString(mrConfigId)
+}
diff --git a/src/runtime/virtcontainers/qemu_amd64_test.go b/src/runtime/virtcontainers/qemu_amd64_test.go
index 2756cb2be06b95f812cb3a9495b6ecadd501b17a..89cf5b4333a35714464f303ebde67f73dc6680ff 100644
--- a/src/runtime/virtcontainers/qemu_amd64_test.go
+++ b/src/runtime/virtcontainers/qemu_amd64_test.go
@@ -9,6 +9,10 @@ package virtcontainers
 
 import (
 	"context"
+	"crypto/sha256"
+	"crypto/sha512"
+	"encoding/base64"
+	"encoding/hex"
 	"fmt"
 	"os"
 	"testing"
@@ -247,6 +251,34 @@ func TestQemuAmd64Microvm(t *testing.T) {
 	assert.False(amd64.supportGuestMemoryHotplug())
 }
 
+// return the policy hash in the host-data format expected by QEMU for SEV-SNP.
+func testSnpHostData(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha256.New()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+
+	encoded_hash := make([]byte, base64.StdEncoding.EncodedLen(len(hash)))
+	base64.StdEncoding.Encode(encoded_hash, hash)
+	return string(encoded_hash)
+}
+
+// return the policy hash in the mrconfigid format expected by QEMU for TDX.
+func testTdxMRCONFIGID(policy string) string {
+	if len(policy) == 0 {
+		return ""
+	}
+
+	h := sha512.New384()
+	h.Write([]byte(policy))
+	hash := h.Sum(nil)
+
+	return hex.EncodeToString(hash)
+}
+
 func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 	var devices []govmmQemu.Device
 	assert := assert.New(t)
@@ -255,30 +287,48 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 
 	id := amd64.(*qemuAmd64).devLoadersCount
 	firmware := "tdvf.fd"
+	policy := "package test1"
+	hostData := testSnpHostData(policy)
+	mrconfigid := testTdxMRCONFIGID(policy)
 	var bios string
 	var err error
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(""))
-	assert.NoError(err)
 
 	// non-protection
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.NoError(err)
+	assert.NotEmpty(bios)
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), policy)
+	assert.NoError(err)
 	assert.NotEmpty(bios)
 
 	// pef protection
 	amd64.(*qemuAmd64).protection = pefProtection
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(""))
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	amd64.(*qemuAmd64).protection = pefProtection
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), policy)
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// Secure Execution protection
 	amd64.(*qemuAmd64).protection = seProtection
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(""))
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), policy)
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// sev protection
 	amd64.(*qemuAmd64).protection = sevProtection
 
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(""))
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -295,10 +345,42 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 
 	assert.Equal(expectedOut, devices)
 
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), policy)
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Type:            govmmQemu.SEVGuest,
+			ID:              "sev",
+			Debug:           false,
+			File:            firmware,
+			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
+			ReducedPhysBits: 1,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
+
 	// snp protection
 	amd64.(*qemuAmd64).protection = snpProtection
 
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []uint8(nil))
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Type:            govmmQemu.SNPGuest,
+			ID:              "snp",
+			Debug:           false,
+			File:            firmware,
+			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
+			ReducedPhysBits: 1,
+		},
+	)
+
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), policy)
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -310,6 +392,7 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 			File:            firmware,
 			CBitPos:         cpuid.AMDMemEncrypt.CBitPosition,
 			ReducedPhysBits: 1,
+			TEEConfigData:   hostData,
 		},
 	)
 
@@ -318,19 +401,37 @@ func TestQemuAmd64AppendProtectionDevice(t *testing.T) {
 	// tdxProtection
 	amd64.(*qemuAmd64).protection = tdxProtection
 
-	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(""))
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Driver:   govmmQemu.Loader,
+			Type:     govmmQemu.TDXGuest,
+			ID:       "tdx",
+			DeviceID: fmt.Sprintf("fd%d", id),
+			Debug:    false,
+			File:     firmware,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
+
+	id += 1
+	devices, bios, err = amd64.appendProtectionDevice(devices, firmware, "", []byte(nil), policy)
 	assert.NoError(err)
 	assert.Empty(bios)
 
 	expectedOut = append(expectedOut,
 		govmmQemu.Object{
-			Driver:         govmmQemu.Loader,
-			Type:           govmmQemu.TDXGuest,
-			ID:             "tdx",
-			DeviceID:       fmt.Sprintf("fd%d", id),
-			Debug:          false,
-			File:           firmware,
-			InitdataDigest: []byte(""),
+			Driver:        govmmQemu.Loader,
+			Type:          govmmQemu.TDXGuest,
+			ID:            "tdx",
+			DeviceID:      fmt.Sprintf("fd%d", id),
+			Debug:         false,
+			File:          firmware,
+			TEEConfigData: mrconfigid,
 		},
 	)
 
diff --git a/src/runtime/virtcontainers/qemu_arch_base.go b/src/runtime/virtcontainers/qemu_arch_base.go
index aa41445916d50fc1572f3919ea093d32819c6aeb..0c5c7b4e766bbbc8bbc01e67d8778e4ed73fcbaa 100644
--- a/src/runtime/virtcontainers/qemu_arch_base.go
+++ b/src/runtime/virtcontainers/qemu_arch_base.go
@@ -165,7 +165,7 @@ type qemuArch interface {
 	// This implementation is architecture specific, some archs may need
 	// a firmware, returns a string containing the path to the firmware that should
 	// be used with the -bios option, ommit -bios option if the path is empty.
-	appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte) ([]govmmQemu.Device, string, error)
+	appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte, agentPolicy string) ([]govmmQemu.Device, string, error)
 
 	// scans the PCIe space and returns the biggest BAR sizes for 32-bit
 	// and 64-bit addressable memory
@@ -920,7 +920,7 @@ func (q *qemuArchBase) setPFlash(p []string) {
 }
 
 // append protection device
-func (q *qemuArchBase) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte) ([]govmmQemu.Device, string, error) {
+func (q *qemuArchBase) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	hvLogger.WithField("arch", runtime.GOARCH).Warnf("Confidential Computing has not been implemented for this architecture")
 	return devices, firmware, nil
 }
diff --git a/src/runtime/virtcontainers/qemu_arm64.go b/src/runtime/virtcontainers/qemu_arm64.go
index bfe6e2d40599e36ccd24abb35464ba32849e9276..825b00ab33d4acf0237841362ccc4e1970076e52 100644
--- a/src/runtime/virtcontainers/qemu_arm64.go
+++ b/src/runtime/virtcontainers/qemu_arm64.go
@@ -154,7 +154,7 @@ func (q *qemuArm64) enableProtection() error {
 	return nil
 }
 
-func (q *qemuArm64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte) ([]govmmQemu.Device, string, error) {
+func (q *qemuArm64) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	err := q.enableProtection()
 	if err != nil {
 		hvLogger.WithField("arch", runtime.GOARCH).Error(err)
diff --git a/src/runtime/virtcontainers/qemu_arm64_test.go b/src/runtime/virtcontainers/qemu_arm64_test.go
index aca949741273bbe24d9184afa238cdeb759520b0..e514a8cdaf791abe91661013b5bbc1e9fba21c9d 100644
--- a/src/runtime/virtcontainers/qemu_arm64_test.go
+++ b/src/runtime/virtcontainers/qemu_arm64_test.go
@@ -183,42 +183,77 @@ func TestQemuArm64AppendProtectionDevice(t *testing.T) {
 	var err error
 
 	// no protection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "XYZ")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// PEF protection
 	arm64.(*qemuArm64).protection = pefProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "11111111111")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// Secure Execution protection
 	arm64.(*qemuArm64).protection = seProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "ABCD")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// SEV protection
 	arm64.(*qemuArm64).protection = sevProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// SNP protection
 	arm64.(*qemuArm64).protection = snpProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
 
 	// TDX protection
 	arm64.(*qemuArm64).protection = tdxProtection
-	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Empty(devices)
+	assert.Empty(bios)
+	assert.NoError(err)
+
+	devices, bios, err = arm64.appendProtectionDevice(devices, firmware, "", []byte(nil), "123456789012345678901234567890123456789012345678")
 	assert.Empty(devices)
 	assert.Empty(bios)
 	assert.NoError(err)
diff --git a/src/runtime/virtcontainers/qemu_ppc64le.go b/src/runtime/virtcontainers/qemu_ppc64le.go
index 87c2139b2b8d68a733cbd18fba71fcc1b5813b54..84e5e7e4ae566e382c630b8cf97849f852d4d80b 100644
--- a/src/runtime/virtcontainers/qemu_ppc64le.go
+++ b/src/runtime/virtcontainers/qemu_ppc64le.go
@@ -157,7 +157,7 @@ func (q *qemuPPC64le) enableProtection() error {
 }
 
 // append protection device
-func (q *qemuPPC64le) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte) ([]govmmQemu.Device, string, error) {
+func (q *qemuPPC64le) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	switch q.protection {
 	case pefProtection:
 		return append(devices,
diff --git a/src/runtime/virtcontainers/qemu_ppc64le_test.go b/src/runtime/virtcontainers/qemu_ppc64le_test.go
index 7bb79bc0e57fa80d51f7f0306efd9ef1bc58731d..5498d305f8aaa607d6ac57566a22f40ab4e126a7 100644
--- a/src/runtime/virtcontainers/qemu_ppc64le_test.go
+++ b/src/runtime/virtcontainers/qemu_ppc64le_test.go
@@ -60,39 +60,45 @@ func TestQemuPPC64leAppendProtectionDevice(t *testing.T) {
 	var devices []govmmQemu.Device
 	var bios, firmware string
 	var err error
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.NoError(err)
 
 	//no protection
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "FOObar")
+	assert.NoError(err)
 	assert.Empty(bios)
 
 	//Secure Execution protection
 	ppc64le.(*qemuPPC64le).protection = seProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//SEV protection
 	ppc64le.(*qemuPPC64le).protection = sevProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//SNP protection
 	ppc64le.(*qemuPPC64le).protection = snpProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//TDX protection
 	ppc64le.(*qemuPPC64le).protection = tdxProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	//PEF protection
 	ppc64le.(*qemuPPC64le).protection = pefProtection
-	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -107,4 +113,19 @@ func TestQemuPPC64leAppendProtectionDevice(t *testing.T) {
 	}
 	assert.Equal(expectedOut, devices)
 
+	devices, bios, err = ppc64le.appendProtectionDevice(devices, firmware, "", []byte(nil), "abc")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Driver:   govmmQemu.SpaprTPMProxy,
+			Type:     govmmQemu.PEFGuest,
+			ID:       pefID,
+			DeviceID: tpmID,
+			File:     tpmHostPath,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
 }
diff --git a/src/runtime/virtcontainers/qemu_s390x.go b/src/runtime/virtcontainers/qemu_s390x.go
index 5f00e9ea76a205dcf297107af6f2531523da5934..71e742696c012d3f33e62dfeed1ee3744d38e08d 100644
--- a/src/runtime/virtcontainers/qemu_s390x.go
+++ b/src/runtime/virtcontainers/qemu_s390x.go
@@ -344,7 +344,7 @@ func (q *qemuS390x) enableProtection() error {
 
 // appendProtectionDevice appends a QEMU object for Secure Execution.
 // Takes devices and returns updated version. Takes BIOS and returns it (no modification on s390x).
-func (q *qemuS390x) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte) ([]govmmQemu.Device, string, error) {
+func (q *qemuS390x) appendProtectionDevice(devices []govmmQemu.Device, firmware, firmwareVolume string, initdataDigest []byte, agentPolicy string) ([]govmmQemu.Device, string, error) {
 	switch q.protection {
 	case seProtection:
 		return append(devices,
diff --git a/src/runtime/virtcontainers/qemu_s390x_test.go b/src/runtime/virtcontainers/qemu_s390x_test.go
index db88b4690f8695802e1087008f974f46baff0dc8..b79db22215bb0e78f25647ef102343b3acd6b498 100644
--- a/src/runtime/virtcontainers/qemu_s390x_test.go
+++ b/src/runtime/virtcontainers/qemu_s390x_test.go
@@ -111,40 +111,64 @@ func TestQemuS390xAppendProtectionDevice(t *testing.T) {
 	var devices []govmmQemu.Device
 	var bios, firmware string
 	var err error
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil))
-	assert.NoError(err)
 
 	// no protection
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "s390x_test")
+	assert.NoError(err)
 	assert.Empty(bios)
 
 	// PEF protection
 	s390x.(*qemuS390x).protection = pefProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "1234")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// TDX protection
 	s390x.(*qemuS390x).protection = tdxProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "123456789012345678901234567890123456789012345678")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// SEV protection
 	s390x.(*qemuS390x).protection = sevProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil))
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// SNP protection
 	s390x.(*qemuS390x).protection = snpProtection
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
+	assert.Error(err)
+	assert.Empty(bios)
+
+	s390x.(*qemuS390x).protection = snpProtection
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "Fc+jr0/5HZMfG0uu54bbUsYuu8K0G7PXH8WNc4idAT8=")
 	assert.Error(err)
 	assert.Empty(bios)
 
 	// Secure Execution protection
 	s390x.(*qemuS390x).protection = seProtection
 
-	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil))
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "")
 	assert.NoError(err)
 	assert.Empty(bios)
 
@@ -155,4 +179,17 @@ func TestQemuS390xAppendProtectionDevice(t *testing.T) {
 		},
 	}
 	assert.Equal(expectedOut, devices)
+
+	devices, bios, err = s390x.appendProtectionDevice(devices, firmware, "", []byte(nil), "foo")
+	assert.NoError(err)
+	assert.Empty(bios)
+
+	expectedOut = append(expectedOut,
+		govmmQemu.Object{
+			Type: govmmQemu.SecExecGuest,
+			ID:   secExecID,
+		},
+	)
+
+	assert.Equal(expectedOut, devices)
 }
diff --git a/src/runtime/virtcontainers/sandbox.go b/src/runtime/virtcontainers/sandbox.go
index 972ba3943314c891e7f9b1b15d16005e7c3d890a..773997b96b91432fcbb117a0354719bd3df25ea2 100644
--- a/src/runtime/virtcontainers/sandbox.go
+++ b/src/runtime/virtcontainers/sandbox.go
@@ -613,6 +613,7 @@ func newSandbox(ctx context.Context, sandboxConfig SandboxConfig, factory Factor
 
 	sandboxConfig.HypervisorConfig.VMStorePath = s.store.RunVMStoragePath()
 	sandboxConfig.HypervisorConfig.RunStorePath = s.store.RunStoragePath()
+	sandboxConfig.HypervisorConfig.AgentPolicy = sandboxConfig.AgentConfig.Policy
 
 	spec := s.GetPatchedOCISpec()
 	if spec != nil && spec.Process.SelinuxLabel != "" {
diff --git a/src/tools/genpolicy/Cargo.lock b/src/tools/genpolicy/Cargo.lock
index 9dc62157bc6a13111f4b207d7ad2b01f099fb971..890ff3e886217974864eccf495f0e846c0e1950d 100644
--- a/src/tools/genpolicy/Cargo.lock
+++ b/src/tools/genpolicy/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
@@ -170,6 +170,21 @@ version = "0.22.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
 
+[[package]]
+name = "bincode"
+version = "1.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad"
+dependencies = [
+ "serde",
+]
+
+[[package]]
+name = "bitfield"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46afbd2983a5d5a7bd740ccb198caf5b82f45c40c09c0eed36052d91cb92e719"
+
 [[package]]
 name = "bitflags"
 version = "1.3.2"
@@ -293,6 +308,12 @@ dependencies = [
  "cc",
 ]
 
+[[package]]
+name = "codicon"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "12170080f3533d6f09a19f81596f836854d0fa4867dc32c8172b8474b4e9de61"
+
 [[package]]
 name = "containerd-client"
 version = "0.4.0"
@@ -501,6 +522,27 @@ dependencies = [
  "subtle",
 ]
 
+[[package]]
+name = "dirs"
+version = "5.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225"
+dependencies = [
+ "dirs-sys",
+]
+
+[[package]]
+name = "dirs-sys"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c"
+dependencies = [
+ "libc",
+ "option-ext",
+ "redox_users",
+ "windows-sys 0.48.0",
+]
+
 [[package]]
 name = "doc-comment"
 version = "0.3.3"
@@ -876,6 +918,12 @@ version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286"
 
+[[package]]
+name = "hex"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"
+
 [[package]]
 name = "hmac"
 version = "0.12.1"
@@ -1137,6 +1185,12 @@ dependencies = [
  "windows-sys 0.45.0",
 ]
 
+[[package]]
+name = "iocuddle"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d8972d5be69940353d5347a1344cb375d9b457d6809b428b05bb1ca2fb9ce007"
+
 [[package]]
 name = "ipnet"
 version = "2.7.1"
@@ -1236,12 +1290,16 @@ version = "0.1.0"
 dependencies = [
  "anyhow",
  "json-patch",
+ "nix 0.24.3",
  "regorus",
  "serde",
  "serde_json",
+ "sev",
+ "sha2",
  "slog",
  "slog-scope",
  "tokio",
+ "vmm-sys-util",
 ]
 
 [[package]]
@@ -1256,6 +1314,16 @@ version = "0.2.168"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5aaeb2981e0606ca11d79718f8bb01164f1d6ed75080182d3abf017e6d244b6d"
 
+[[package]]
+name = "libredox"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d"
+dependencies = [
+ "bitflags 2.4.1",
+ "libc",
+]
+
 [[package]]
 name = "libz-ng-sys"
 version = "1.1.15"
@@ -1324,6 +1392,15 @@ version = "2.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
 
+[[package]]
+name = "memoffset"
+version = "0.6.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"
+dependencies = [
+ "autocfg",
+]
+
 [[package]]
 name = "memoffset"
 version = "0.7.1"
@@ -1383,6 +1460,18 @@ dependencies = [
  "tempfile",
 ]
 
+[[package]]
+name = "nix"
+version = "0.24.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069"
+dependencies = [
+ "bitflags 1.3.2",
+ "cfg-if",
+ "libc",
+ "memoffset 0.6.5",
+]
+
 [[package]]
 name = "nix"
 version = "0.26.4"
@@ -1392,7 +1481,7 @@ dependencies = [
  "bitflags 1.3.2",
  "cfg-if",
  "libc",
- "memoffset",
+ "memoffset 0.7.1",
  "pin-utils",
 ]
 
@@ -1527,6 +1616,12 @@ dependencies = [
  "vcpkg",
 ]
 
+[[package]]
+name = "option-ext"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"
+
 [[package]]
 name = "os_str_bytes"
 version = "6.4.1"
@@ -1942,6 +2037,17 @@ dependencies = [
  "bitflags 2.4.1",
 ]
 
+[[package]]
+name = "redox_users"
+version = "0.4.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43"
+dependencies = [
+ "getrandom 0.2.12",
+ "libredox",
+ "thiserror",
+]
+
 [[package]]
 name = "regex"
 version = "1.10.5"
@@ -2167,6 +2273,15 @@ dependencies = [
  "serde_derive",
 ]
 
+[[package]]
+name = "serde-big-array"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "11fc7cc2c76d73e0f27ee52abbd64eec84d46f370c88371120433196934e4b7f"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde-transcode"
 version = "1.1.1"
@@ -2176,6 +2291,15 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "serde_bytes"
+version = "0.11.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8437fd221bde2d4ca316d61b90e337e9e702b3820b87d63caa9ba6c02bd06d96"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
 version = "1.0.210"
@@ -2232,6 +2356,28 @@ dependencies = [
  "yaml-rust",
 ]
 
+[[package]]
+name = "sev"
+version = "2.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77e9de97c6e3c65e4e67997d48ad506d258da10edc10894277093da679441f23"
+dependencies = [
+ "bincode",
+ "bitfield",
+ "bitflags 1.3.2",
+ "codicon",
+ "dirs",
+ "hex",
+ "iocuddle",
+ "lazy_static",
+ "libc",
+ "serde",
+ "serde-big-array",
+ "serde_bytes",
+ "static_assertions",
+ "uuid",
+]
+
 [[package]]
 name = "sha2"
 version = "0.10.6"
@@ -2294,6 +2440,12 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
+[[package]]
+name = "static_assertions"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"
+
 [[package]]
 name = "strsim"
 version = "0.10.0"
@@ -2661,7 +2813,7 @@ dependencies = [
  "home",
  "libc",
  "log",
- "nix",
+ "nix 0.26.4",
  "protobuf 3.3.0",
  "protobuf-codegen 3.3.0",
  "thiserror",
@@ -2748,6 +2900,17 @@ dependencies = [
  "percent-encoding",
 ]
 
+[[package]]
+name = "uuid"
+version = "1.17.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3cf4199d1e5d15ddd86a694e4d0dffa9c323ce759fea589f00fef9d81cc1931d"
+dependencies = [
+ "js-sys",
+ "serde",
+ "wasm-bindgen",
+]
+
 [[package]]
 name = "vcpkg"
 version = "0.2.15"
@@ -2760,6 +2923,16 @@ version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
 
+[[package]]
+name = "vmm-sys-util"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48b7b084231214f7427041e4220d77dfe726897a6d41fddee450696e66ff2a29"
+dependencies = [
+ "bitflags 1.3.2",
+ "libc",
+]
+
 [[package]]
 name = "wait-timeout"
 version = "0.2.1"
