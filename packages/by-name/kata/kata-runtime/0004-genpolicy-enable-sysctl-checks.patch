From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Markus Rudy <mr@edgeless.systems>
Date: Wed, 24 Jul 2024 09:48:48 +0200
Subject: [PATCH] genpolicy: enable sysctl checks

Sysctls may be added to a container by the Kubernetes pod definition or
by containerd configuration. This commit adds support for the
corresponding PodSpec field and an option to specify
environment-dependent sysctls in the settings file.
---
 src/tools/genpolicy/genpolicy-settings.json | 10 ++++++++++
 src/tools/genpolicy/rules.rego              | 19 ++++++++++++++++++-
 src/tools/genpolicy/src/containerd.rs       |  4 ++++
 src/tools/genpolicy/src/pod.rs              | 20 ++++++++++++++++++++
 src/tools/genpolicy/src/policy.rs           |  9 +++++++++
 5 files changed, 61 insertions(+), 1 deletion(-)

diff --git a/src/tools/genpolicy/genpolicy-settings.json b/src/tools/genpolicy/genpolicy-settings.json
index fe1625bac119b59ce2094b2220e2a87c486e670a..e50d5e545e3fe42db486771345310d4c2157be2f 100644
--- a/src/tools/genpolicy/genpolicy-settings.json
+++ b/src/tools/genpolicy/genpolicy-settings.json
@@ -39,6 +39,10 @@
             ]
         },
         "Linux": {
+            "Sysctl": {
+                "net.ipv4.ip_unprivileged_port_start": "0",
+                "net.ipv4.ping_group_range": "0 2147483647"
+            },
             "MaskedPaths": [
                 "/proc/acpi",
                 "/proc/asound",
@@ -132,6 +136,12 @@
             "io.kubernetes.cri.sandbox-id": "^[a-z0-9]{64}$",
             "io.katacontainers.pkg.oci.container_type": "pod_container",
             "io.kubernetes.cri.container-type": "container"
+        },
+        "Linux": {
+            "Sysctl": {
+                "net.ipv4.ip_unprivileged_port_start": "0",
+                "net.ipv4.ping_group_range": "0 2147483647"
+            }
         }
     },
     "volumes": {
diff --git a/src/tools/genpolicy/rules.rego b/src/tools/genpolicy/rules.rego
index ed6b4893a9c4c8b49dc26cc645d763ee7e36eb4f..1a7f7107030b4af11a43e26b6481d3a0016f7816 100644
--- a/src/tools/genpolicy/rules.rego
+++ b/src/tools/genpolicy/rules.rego
@@ -120,7 +120,6 @@ allow_create_container_input {
     is_null(i_linux.Resources.Network)
     is_null(i_linux.Resources.Pids)
     is_null(i_linux.Seccomp)
-    i_linux.Sysctl == {}
 
     i_process := i_oci.Process
     count(i_process.SelinuxLabel) == 0
@@ -438,6 +437,7 @@ allow_linux(p_oci, i_oci) {
     allow_masked_paths(p_oci, i_oci)
     allow_readonly_paths(p_oci, i_oci)
     allow_linux_devices(p_oci.Linux.Devices, i_oci.Linux.Devices)
+    allow_linux_sysctl(p_oci.Linux, i_oci.Linux)
 
     print("allow_linux: true")
 }
@@ -536,6 +536,23 @@ allow_linux_devices(p_devices, i_devices) {
     print("allow_linux_devices: true")
 }
 
+allow_linux_sysctl(p_linux, i_linux) {
+    print("allow_linux_sysctl 1: start")
+    not i_linux["Sysctl"]
+    print("allow_linux_sysctl 1: true")
+}
+
+allow_linux_sysctl(p_linux, i_linux) {
+    print("allow_linux_sysctl 2: start")
+    p_sysctl := p_linux.Sysctl
+    i_sysctl := i_linux.Sysctl
+    every i_name, i_val in i_sysctl {
+        print("allow_linux_sysctl: i_name =", i_name, "i_val =", i_val)
+        p_sysctl[i_name] == i_val
+    }
+    print("allow_linux_sysctl 2: true")
+}
+
 # Check the consistency of the input "io.katacontainers.pkg.oci.bundle_path"
 # and io.kubernetes.cri.sandbox-id" values with other fields.
 allow_by_bundle_or_sandbox_id(p_oci, i_oci, p_storages, i_storages) {
diff --git a/src/tools/genpolicy/src/containerd.rs b/src/tools/genpolicy/src/containerd.rs
index 075fced5bfec11b27e529f0b1d2dba5e6271ba82..df7e4d110802c0a856dd4197acdd1325acdb5060 100644
--- a/src/tools/genpolicy/src/containerd.rs
+++ b/src/tools/genpolicy/src/containerd.rs
@@ -3,6 +3,8 @@
 // SPDX-License-Identifier: Apache-2.0
 //
 
+use std::collections::BTreeMap;
+
 use crate::policy;
 
 // Default process field from containerd.
@@ -153,6 +155,7 @@ pub fn get_linux(privileged_container: bool) -> policy::KataLinux {
                 "/proc/sysrq-trigger".to_string(),
             ],
             Devices: vec![],
+            Sysctl: BTreeMap::new(),
         }
     } else {
         policy::KataLinux {
@@ -160,6 +163,7 @@ pub fn get_linux(privileged_container: bool) -> policy::KataLinux {
             MaskedPaths: vec![],
             ReadonlyPaths: vec![],
             Devices: vec![],
+            Sysctl: BTreeMap::new(),
         }
     }
 }
diff --git a/src/tools/genpolicy/src/pod.rs b/src/tools/genpolicy/src/pod.rs
index 19f8822395ca225961bcf77bc3e5ae25e3c31119..1769ca02e1e159e977d22e216b540e299003e29b 100644
--- a/src/tools/genpolicy/src/pod.rs
+++ b/src/tools/genpolicy/src/pod.rs
@@ -21,6 +21,7 @@ use log::{debug, warn};
 use protocols::agent;
 use serde::{Deserialize, Serialize};
 use std::collections::BTreeMap;
+use std::collections::HashMap;
 
 /// See Reference / Kubernetes API / Workload Resources / Pod.
 #[derive(Clone, Debug, Serialize, Deserialize)]
@@ -298,6 +299,9 @@ struct SecurityContext {
 
     #[serde(skip_serializing_if = "Option::is_none")]
     seccompProfile: Option<SeccompProfile>,
+
+    #[serde(skip_serializing_if = "Option::is_none")]
+    sysctls: Option<Vec<Sysctl>>,
 }
 
 /// See Reference / Kubernetes API / Workload Resources / Pod.
@@ -310,6 +314,13 @@ struct SeccompProfile {
     localhostProfile: Option<String>,
 }
 
+/// See Reference / Kubernetes API / Workload Resources / Pod.
+#[derive(Clone, Debug, Serialize, Deserialize)]
+struct Sysctl {
+    name: String,
+    value: String,
+}
+
 /// See Reference / Kubernetes API / Workload Resources / Pod.
 #[derive(Clone, Debug, Serialize, Deserialize)]
 pub struct PodSecurityContext {
@@ -699,6 +710,14 @@ impl Container {
 
         commands
     }
+
+    pub fn apply_sysctls(&self, sysctls: &mut BTreeMap<String, String>) {
+        if let Some(securityContext) = &self.securityContext {
+            if let Some(container_sysctls) = &securityContext.sysctls {
+                sysctls.extend(container_sysctls.iter().map(|el| (el.name.clone(), el.value.clone())));
+            }
+        }
+    }
 }
 
 impl EnvFromSource {
@@ -995,6 +1014,7 @@ pub async fn add_pause_container(containers: &mut Vec<Container>, config: &Confi
             capabilities: None,
             runAsUser: None,
             seccompProfile: None,
+            sysctls: None,
         }),
         ..Default::default()
     };
diff --git a/src/tools/genpolicy/src/policy.rs b/src/tools/genpolicy/src/policy.rs
index 973643e1f270b589e30e0b2e9235dbfa70df0f20..c2753c0f89f28638f955903db412407cb6b90ef9 100644
--- a/src/tools/genpolicy/src/policy.rs
+++ b/src/tools/genpolicy/src/policy.rs
@@ -180,14 +180,20 @@ pub struct KataLinux {
     pub Namespaces: Vec<KataLinuxNamespace>,
 
     /// MaskedPaths masks over the provided paths inside the container.
+    #[serde(default)]
     pub MaskedPaths: Vec<String>,
 
     /// ReadonlyPaths sets the provided paths as RO inside the container.
+    #[serde(default)]
     pub ReadonlyPaths: Vec<String>,
 
     /// Devices contains devices to be created inside the container.
     #[serde(default)]
     pub Devices: Vec<KataLinuxDevice>,
+
+    /// Sysctls contains sysctls to be applied inside the container.
+    #[serde(default, skip_serializing_if = "BTreeMap::is_empty")]
+    pub Sysctl: BTreeMap<String, String>,
 }
 
 /// OCI container LinuxNamespace struct. This struct is similar to the LinuxNamespace
@@ -616,6 +622,9 @@ impl AgentPolicy {
             linux.Devices.push(default_device.clone())
         }
 
+        linux.Sysctl.extend(c_settings.Linux.Sysctl.clone());
+        yaml_container.apply_sysctls(&mut linux.Sysctl);
+
         ContainerPolicy {
             OCI: KataSpec {
                 Version: self.config.settings.kata_config.oci_version.clone(),
