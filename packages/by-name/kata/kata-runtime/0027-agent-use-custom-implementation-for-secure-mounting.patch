From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Charlotte Hartmann Paludo <git@charlotteharludo.com>
Date: Mon, 18 Aug 2025 09:49:27 +0200
Subject: [PATCH] agent: use custom implementation for secure mounting

Signed-off-by: Charlotte Hartmann Paludo <git@charlotteharludo.com>
---
 src/agent/src/confidential_data_hub/mod.rs | 35 ++++++++++++++++++----
 src/agent/src/rpc.rs                       |  3 --
 2 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/src/agent/src/confidential_data_hub/mod.rs b/src/agent/src/confidential_data_hub/mod.rs
index 9bb1074dd422e52388200209c92f7937698606c8..2aca6358ef660df1f362f25b034ac45c1b98fad2 100644
--- a/src/agent/src/confidential_data_hub/mod.rs
+++ b/src/agent/src/confidential_data_hub/mod.rs
@@ -287,12 +287,37 @@ pub async fn secure_mount(
     flags: Vec<String>,
     mount_point: &str,
 ) -> Result<()> {
-    let cdh_client = CDH_CLIENT
-        .get()
-        .expect("Confidential Data Hub not initialized");
+    if let Err(e) = secure_mount_contrast(volume_type, options, flags, mount_point).await {
+        warn!(
+            sl(),
+            "Encountered an error while attempting secure mount: {e}"
+        )
+    };
+    Ok(())
+}
 
-    cdh_client
-        .secure_mount(volume_type, options, flags, mount_point)
+pub async fn secure_mount_contrast(
+    volume_type: &str,
+    options: &std::collections::HashMap<String, String>,
+    flags: Vec<String>,
+    mount_point: &str,
+) -> Result<()> {
+    let client = ttrpc::asynchronous::Client::connect("unix:///run/confidential-containers/securemount.sock")?;
+    let secure_mount_client =
+        confidential_data_hub_ttrpc_async::SecureMountServiceClient::new(client.clone());
+    let req = confidential_data_hub::SecureMountRequest {
+        volume_type: volume_type.to_string(),
+        options: options.clone(),
+        flags,
+        mount_point: mount_point.to_string(),
+        ..Default::default()
+    };
+
+    let _ = secure_mount_client
+        .secure_mount(
+            ttrpc::context::with_timeout(AGENT_CONFIG.cdh_api_timeout.as_nanos() as i64),
+            &req,
+        )
         .await?;
     Ok(())
 }
diff --git a/src/agent/src/rpc.rs b/src/agent/src/rpc.rs
index 3bcdf544208176b449fddf73b9fc3af3f7319360..4a72e03f07648469686190376ae53c67f7ca3950 100644
--- a/src/agent/src/rpc.rs
+++ b/src/agent/src/rpc.rs
@@ -2259,9 +2259,6 @@ fn is_sealed_secret_path(source_path: &str) -> bool {
 }
 
 async fn cdh_handler_trusted_storage(oci: &mut Spec) -> Result<()> {
-    if !confidential_data_hub::is_cdh_client_initialized() {
-        return Ok(());
-    }
     let linux = oci
         .linux()
         .as_ref()
