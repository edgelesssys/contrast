From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Charlotte Hartmann Paludo <git@charlotteharludo.com>
Date: Mon, 1 Sep 2025 15:14:26 +0200
Subject: [PATCH] agent: use custom implementation for secure mounting

Signed-off-by: Charlotte Hartmann Paludo <git@charlotteharludo.com>
---
 src/agent/src/confidential_data_hub/mod.rs | 35 ++++++++++++++++++----
 src/agent/src/rpc.rs                       |  5 +---
 2 files changed, 31 insertions(+), 9 deletions(-)

diff --git a/src/agent/src/confidential_data_hub/mod.rs b/src/agent/src/confidential_data_hub/mod.rs
index 39ba3fdfb04c46388d59c6116a05520b5ea64102..47417d47a731951af173584facfe6999f01cab7b 100644
--- a/src/agent/src/confidential_data_hub/mod.rs
+++ b/src/agent/src/confidential_data_hub/mod.rs
@@ -300,12 +300,37 @@ pub async fn secure_mount(
     flags: Vec<String>,
     mount_point: &str,
 ) -> Result<()> {
-    let cdh_client = CDH_CLIENT
-        .get()
-        .expect("Confidential Data Hub not initialized");
+    if let Err(e) = secure_mount_contrast(volume_type, options, flags, mount_point).await {
+        warn!(
+            sl(),
+            "Encountered an error while attempting secure mount: {e}"
+        )
+    };
+    Ok(())
+}
 
-    cdh_client
-        .secure_mount(volume_type, options, flags, mount_point)
+pub async fn secure_mount_contrast(
+    volume_type: &str,
+    options: &std::collections::HashMap<String, String>,
+    flags: Vec<String>,
+    mount_point: &str,
+) -> Result<()> {
+    let client = ttrpc::asynchronous::Client::connect("unix:///run/guest-services/securemount.socket")?;
+    let secure_mount_client =
+        confidential_data_hub_ttrpc_async::SecureMountServiceClient::new(client.clone());
+    let req = confidential_data_hub::SecureMountRequest {
+        volume_type: volume_type.to_string(),
+        options: options.clone(),
+        flags,
+        mount_point: mount_point.to_string(),
+        ..Default::default()
+    };
+
+    let _ = secure_mount_client
+        .secure_mount(
+            ttrpc::context::with_timeout(AGENT_CONFIG.cdh_api_timeout.as_nanos() as i64),
+            &req,
+        )
         .await?;
     Ok(())
 }
diff --git a/src/agent/src/rpc.rs b/src/agent/src/rpc.rs
index 92d5a316ce9baa52c43281c37a020c78130bd00d..32defadbeede8d6bb5d2dc77a43732ef031885a3 100644
--- a/src/agent/src/rpc.rs
+++ b/src/agent/src/rpc.rs
@@ -107,7 +107,7 @@ use kata_types::k8s;
 
 pub const CONTAINER_BASE: &str = "/run/kata-containers";
 const MODPROBE_PATH: &str = "/sbin/modprobe";
-const TRUSTED_IMAGE_STORAGE_DEVICE: &str = "/dev/trusted_store";
+const TRUSTED_IMAGE_STORAGE_DEVICE: &str = "/dev/image_store";
 /// the iptables seriers binaries could appear either in /sbin
 /// or /usr/sbin, we need to check both of them
 const USR_IPTABLES_SAVE: &str = "/usr/sbin/iptables-save";
@@ -2263,9 +2263,6 @@ fn is_sealed_secret_path(source_path: &str) -> bool {
 }
 
 async fn cdh_handler_trusted_storage(oci: &mut Spec) -> Result<()> {
-    if !confidential_data_hub::is_cdh_client_initialized() {
-        return Ok(());
-    }
     let linux = oci
         .linux()
         .as_ref()
