From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Markus Rudy <mr@edgeless.systems>
Date: Tue, 29 Jul 2025 17:04:25 +0200
Subject: [PATCH] misc: use compressed policy

Signed-off-by: Markus Rudy <mr@edgeless.systems>
---
 src/agent/Cargo.lock                          |  1 +
 src/agent/policy/Cargo.toml                   |  1 +
 src/agent/policy/src/policy.rs                | 19 ++++++++++++-------
 src/agent/src/main.rs                         |  2 +-
 src/libs/protocols/protos/agent.proto         |  2 +-
 src/runtime/virtcontainers/kata_agent.go      |  2 +-
 .../pkg/agent/protocols/grpc/agent.pb.go      |  8 ++++----
 src/tools/genpolicy/Cargo.lock                | 14 ++++++++++++++
 src/tools/genpolicy/src/policy.rs             |  9 ++++++++-
 9 files changed, 43 insertions(+), 15 deletions(-)

diff --git a/src/agent/Cargo.lock b/src/agent/Cargo.lock
index 1db869b3edb07b8ca18c871c729cf151d9e34bb3..d7a0a3a283621d714cb4c41dd556ae85224cd828 100644
--- a/src/agent/Cargo.lock
+++ b/src/agent/Cargo.lock
@@ -2153,6 +2153,7 @@ name = "kata-agent-policy"
 version = "0.1.0"
 dependencies = [
  "anyhow",
+ "async-compression",
  "json-patch",
  "nix 0.24.3",
  "regorus",
diff --git a/src/agent/policy/Cargo.toml b/src/agent/policy/Cargo.toml
index 9b595c04cd22a9630990c501eff161c8a8b1724f..2bfaa6a09df385911276f97918b2bbd9de562115 100644
--- a/src/agent/policy/Cargo.toml
+++ b/src/agent/policy/Cargo.toml
@@ -23,6 +23,7 @@ regorus = { version = "0.2.8", default-features = false, features = [
 ] }
 json-patch = "2.0.0"
 
+async-compression = { version = "0.4.22", features = ["tokio", "gzip"] }
 
 # Note: this crate sets the slog 'max_*' features which allows the log level
 # to be modified at runtime.
diff --git a/src/agent/policy/src/policy.rs b/src/agent/policy/src/policy.rs
index 5caf0c99c4484c46f9ae03f85228d674eef19c23..bfe69d9bb176d4961a85a26682dfaa00ba71929f 100644
--- a/src/agent/policy/src/policy.rs
+++ b/src/agent/policy/src/policy.rs
@@ -9,7 +9,8 @@
 use anyhow::{bail, ensure, Result};
 use slog::{debug, error, info, warn};
 use sha2::{Digest, Sha256};
-use tokio::io::AsyncWriteExt;
+use tokio::io::{AsyncReadExt, AsyncWriteExt};
+use async_compression::tokio::bufread::GzipDecoder;
 
 use crate::sev::get_snp_host_data;
 use crate::tdx::get_tdx_mrconfigid;
@@ -197,11 +198,15 @@ impl AgentPolicy {
     }
 
     /// Replace the Policy in regorus.
-    pub async fn set_policy(&mut self, policy: &str) -> Result<()> {
-        verify_policy_digest(policy)?;
+    pub async fn set_policy(&mut self, compressed_policy: &[u8]) -> Result<()> {
+        verify_policy_digest(compressed_policy)?;
+
+        let mut policy = String::new();
+        GzipDecoder::new(compressed_policy).read_to_string(&mut policy).await?;
+
         self.engine = Self::new_engine();
         self.engine
-            .add_policy("agent_policy".to_string(), policy.to_string())?;
+            .add_policy("agent_policy".to_string(), policy)?;
         self.update_allow_failures_flag().await?;
         Ok(())
     }
@@ -247,7 +252,7 @@ impl AgentPolicy {
     }
 }
 
-fn verify_policy_digest(policy: &str) -> Result<()> {
+fn verify_policy_digest(policy: &[u8]) -> Result<()> {
     if let Ok(expected_digest) = get_tdx_mrconfigid() {
         info!(sl!(), "policy: TDX MrConfigId ({:?})", expected_digest);
 
@@ -273,9 +278,9 @@ fn verify_policy_digest(policy: &str) -> Result<()> {
     }
 }
 
-pub fn verify_sha_256(policy: &str, expected_digest: &[u8]) -> Result<()> {
+pub fn verify_sha_256(policy: &[u8], expected_digest: &[u8]) -> Result<()> {
     let mut hasher = Sha256::new();
-    hasher.update(policy.as_bytes());
+    hasher.update(policy);
     let digest = hasher.finalize();
     info!(sl!(), "policy: calculated digest ({:?})", digest);
     ensure!(
diff --git a/src/agent/src/main.rs b/src/agent/src/main.rs
index 288c9a0d79b878505495f8f0dbc727d28ef84c29..240f382e4d8c9b80c45b562f78d9557a8eac048c 100644
--- a/src/agent/src/main.rs
+++ b/src/agent/src/main.rs
@@ -424,7 +424,7 @@ async fn start_sandbox(
             AGENT_POLICY
                 .lock()
                 .await
-                .set_policy(policy)
+                .set_policy(policy.as_bytes())
                 .await
                 .context("Failed to set policy from initdata")?;
         }
diff --git a/src/libs/protocols/protos/agent.proto b/src/libs/protocols/protos/agent.proto
index ac186fe935ae57dca4980d92def226aa6ba006d2..3c85949b881a404297c0c8e871df5d511e9d90e5 100644
--- a/src/libs/protocols/protos/agent.proto
+++ b/src/libs/protocols/protos/agent.proto
@@ -618,7 +618,7 @@ message ResizeVolumeRequest {
 }
 
 message SetPolicyRequest {
-	string policy = 1;
+	bytes policy = 1;
 }
 
 message MemAgentMemcgConfig {
diff --git a/src/runtime/virtcontainers/kata_agent.go b/src/runtime/virtcontainers/kata_agent.go
index 59ccaf3c86663f12bf2323cc3ddd12573b3e1d98..03daa36f057bdbc72133683e53615325e51c98b8 100644
--- a/src/runtime/virtcontainers/kata_agent.go
+++ b/src/runtime/virtcontainers/kata_agent.go
@@ -2670,7 +2670,7 @@ func (k *kataAgent) resizeGuestVolume(ctx context.Context, volumeGuestPath strin
 }
 
 func (k *kataAgent) setPolicy(ctx context.Context, policy string) error {
-	_, err := k.sendReq(ctx, &grpc.SetPolicyRequest{Policy: policy})
+	_, err := k.sendReq(ctx, &grpc.SetPolicyRequest{Policy: []byte(policy)})
 	if err != nil && err.Error() == context.DeadlineExceeded.Error() {
 		return status.Errorf(codes.DeadlineExceeded, "SetPolicyRequest timed out")
 	}
diff --git a/src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go b/src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go
index 49bcaba24d333fb91e66173416b3c969e8afbfc1..807c2b7d16fda3b7950cdf473647192249752094 100644
--- a/src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go
+++ b/src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go
@@ -4178,7 +4178,7 @@ type SetPolicyRequest struct {
 	sizeCache     protoimpl.SizeCache
 	unknownFields protoimpl.UnknownFields
 
-	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
+	Policy []byte `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
 }
 
 func (x *SetPolicyRequest) Reset() {
@@ -4213,11 +4213,11 @@ func (*SetPolicyRequest) Descriptor() ([]byte, []int) {
 	return file_agent_proto_rawDescGZIP(), []int{67}
 }
 
-func (x *SetPolicyRequest) GetPolicy() string {
+func (x *SetPolicyRequest) GetPolicy() []byte {
 	if x != nil {
 		return x.Policy
 	}
-	return ""
+	return nil
 }
 
 type MemAgentMemcgConfig struct {
@@ -4904,7 +4904,7 @@ var file_agent_proto_rawDesc = []byte{
 	0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
 	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
 	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
-	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
+	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
 	0x79, 0x22, 0xfc, 0x03, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
 	0x6d, 0x63, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73,
 	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x64,
diff --git a/src/tools/genpolicy/Cargo.lock b/src/tools/genpolicy/Cargo.lock
index 5c02ee6ea5c26e61829f4cd8bf1b6f30daf1f7a8..9365c94ca06474fedc6477ac157537f0db3885fc 100644
--- a/src/tools/genpolicy/Cargo.lock
+++ b/src/tools/genpolicy/Cargo.lock
@@ -119,6 +119,19 @@ dependencies = [
  "wait-timeout",
 ]
 
+[[package]]
+name = "async-compression"
+version = "0.4.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ddb939d66e4ae03cee6091612804ba446b12878410cfa17f785f4dd67d4014e8"
+dependencies = [
+ "flate2",
+ "futures-core",
+ "memchr",
+ "pin-project-lite",
+ "tokio",
+]
+
 [[package]]
 name = "async-trait"
 version = "0.1.68"
@@ -1478,6 +1491,7 @@ name = "kata-agent-policy"
 version = "0.1.0"
 dependencies = [
  "anyhow",
+ "async-compression",
  "json-patch",
  "nix 0.24.3",
  "regorus",
diff --git a/src/tools/genpolicy/src/policy.rs b/src/tools/genpolicy/src/policy.rs
index 61c59fbcbf9b1ed1b3a640a72127562ad67eaf6a..132b04a76d5dbb35af8b29493e8587a9b2e418db 100644
--- a/src/tools/genpolicy/src/policy.rs
+++ b/src/tools/genpolicy/src/policy.rs
@@ -583,7 +583,14 @@ impl AgentPolicy {
         if self.config.raw_out {
             std::io::stdout().write_all(policy.as_bytes()).unwrap();
         }
-        general_purpose::STANDARD.encode(policy.as_bytes())
+
+        let mut compressed_policy = Vec::new();
+        let mut gz = flate2::GzBuilder::new()
+            .write(&mut compressed_policy, flate2::Compression::best());
+        gz.write_all(policy.as_bytes()).unwrap();
+        gz.finish().unwrap();
+
+        general_purpose::STANDARD.encode(compressed_policy)
     }
 
     pub fn get_container_policy(
