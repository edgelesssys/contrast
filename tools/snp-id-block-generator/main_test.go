// Copyright 2025 Edgeless Systems GmbH
// SPDX-License-Identifier: AGPL-3.0-only

package main

import (
	"testing"

	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	testCases := map[string]struct {
		launchDigest        string
		expectedIDBlock     *string
		expectedIDAuthBlock *string
		wantErr             bool
	}{
		"no error": {
			launchDigest: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			wantErr:      false,
		},
		"constant output": {
			launchDigest:        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedIDBlock:     toPtr("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAAAAwAAAAAA"),
			expectedIDAuthBlock: toPtrgAAAJRw+2MlTZajRqTW7GAjuHzOaUY0cFK1DpqJMWS/uiY5jWwHz9w3XmnoBo6JUu++MwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANBF1wxdrz5Ky5bw6Kq5gJk9EyXC92bsBvLq9F8Z1XnYTFY1Air7N/SzTB6zr7T6Kw
			wantErr:             false,
		},
		"invalid launch digest length": {
			launchDigest: "",
			wantErr:      true,
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)
			require := require.New(t)

			// create in-memory filesystem
			fs := afero.NewMemMapFs()

			// create launch digest file
			require.NoError(afero.WriteFile(fs, "launch-digest", []byte(tc.launchDigest), 0o644))

			err := generate(fs, "launch-digest", "id-block-out", "id-auth-out")
			if tc.wantErr {
				assert.Error(err)
				return
			}
			assert.NoError(err)

			// read ID block
			idBlock, err := afero.ReadFile(fs, "id-block-out")
			assert.NoError(err)

			// read ID auth block
			idAuthBlock, err := afero.ReadFile(fs, "id-auth-out")
			assert.NoError(err)

			if tc.expectedIDAuthBlock != nil {
				assert.Equal(*tc.expectedIDBlock, string(idBlock))
			} else {
				assert.NotEmpty(idBlock)
			}
			if tc.expectedIDAuthBlock != nil {
				assert.Equal(*tc.expectedIDAuthBlock, string(idAuthBlock))
			} else {
				assert.NotEmpty(idAuthBlock)
			}
		})
	}
}

func toPtr[T any](t T) *T {
	return &t
}
