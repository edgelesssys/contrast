// Copyright 2025 Edgeless Systems GmbH
// SPDX-License-Identifier: AGPL-3.0-only

package main

import (
	"testing"

	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	testCases := map[string]struct {
		launchDigest        string
		expectedIDBlock     *string
		expectedIDAuthBlock *string
		expectedIDBlockIGVM *string
		wantErr             bool
	}{
		"no error": {
			launchDigest: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			wantErr:      false,
		},
		"constant output": {
			launchDigest:        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedIDBlock:     toPtr("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAAAAwAAAAAA"),
			expectedIDAuthBlock: toPtrgAAAJRw+2MlTZajRqTW7GAjuHzOaUY0cFK1DpqJMWS/uiY5jWwHz9w3XmnoBo6JUu++MwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANBF1wxdrz5Ky5bw6Kq5gJk9EyXC92bsBvLq9F8Z1XnYTFY1Air7N/SzTB6zr7T6Kw
			expectedIDBlockIGVM: toPtr("{\"CompatibilityMask\":1,\"AuthorKeyEnabled\":0,\"Reserved\":[0,0,0],\"LD\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"FamilyID\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ImageID\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"Version\":1,\"GuestSVN\":2,\"IDKeyAlgorithm\":1,\"AuthorKeyAlgorithm\":1,\"IDKeySignature\":{\"RComp\":[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"SComp\":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},\"IDPublicKey\":{\"Curve\":2,\"Reserved\":0,\"QX\":[148,112,251,99,37,77,150,163,70,164,214,236,96,35,184,124,206,105,70,52,112,82,181,14,154,137,49,100,191,186,38,57,141,108,7,207,220,55,94,105,232,6,142,137,82,239,190,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"QY\":[208,69,215,12,93,175,62,74,203,150,240,232,170,185,128,153,61,19,37,194,247,102,236,6,242,234,244,95,25,213,121,216,76,86,53,2,42,251,55,244,179,76,30,179,175,180,250,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},\"AuthorKeySignature\":{\"RComp\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"SComp\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},\"AuthorPublicKey\":{\"Curve\":0,\"Reserved\":0,\"QX\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"QY\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}"),
			wantErr:             false,
		},
		"invalid launch digest length": {
			launchDigest: "",
			wantErr:      true,
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)
			require := require.New(t)

			// create in-memory filesystem
			fs := afero.NewMemMapFs()

			// create launch digest file
			require.NoError(afero.WriteFile(fs, "launch-digest", []byte(tc.launchDigest), 0o644))

			err := generate(fs, "launch-digest", "id-block-out", "id-auth-out", "id-block-igvm-out")
			if tc.wantErr {
				assert.Error(err)
				return
			}
			assert.NoError(err)

			// read ID block
			idBlock, err := afero.ReadFile(fs, "id-block-out")
			assert.NoError(err)

			// read ID auth block
			idAuthBlock, err := afero.ReadFile(fs, "id-auth-out")
			assert.NoError(err)

			// read IGVM ID Block JSON
			idBlockIGVMJson, err := afero.ReadFile(fs, "id-block-igvm-out")
			assert.NoError(err)

			if tc.expectedIDAuthBlock != nil {
				assert.Equal(*tc.expectedIDBlock, string(idBlock))
			} else {
				assert.NotEmpty(idBlock)
			}
			if tc.expectedIDAuthBlock != nil {
				assert.Equal(*tc.expectedIDAuthBlock, string(idAuthBlock))
			} else {
				assert.NotEmpty(idAuthBlock)
			}
			if tc.expectedIDBlockIGVM != nil {
				assert.JSONEq(*tc.expectedIDBlockIGVM, string(idBlockIGVMJson))
			} else {
				assert.NotEmpty(idBlockIGVMJson)
			}
		})
	}
}

func toPtr[T any](t T) *T {
	return &t
}
