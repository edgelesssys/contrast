// Copyright 2025 Edgeless Systems GmbH
// SPDX-License-Identifier: AGPL-3.0-only

package main

import (
	"testing"

	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	testCases := map[string]struct {
		launchDigest        string
		expectedIDBlock     *string
		expectedIDAuthBlock *string
		expectedIDBlockIGVM *string
		wantErr             bool
	}{
		"no error": {
			launchDigest: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			wantErr:      false,
		},
		"constant output": {
			launchDigest:        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedIDBlock:     toPtr("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAAAAwAAAAAA"),
			expectedIDAuthBlock: toPtrgAAAOhZe4GklWqeHoG6dp+O0JniwM7MaIqNO3Q/ew8fs8Uu93s8lWZSYVZkfsSwI02fVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKGiChAzNJKciMnq0Cl0huifigR6iw0dP50nT8MstUNQm1Kz7KdSN9ktJgKmnnqDpw
			expectedIDBlockIGVM: toPtr("{\"CompatibilityMask\":1,\"AuthorKeyEnabled\":0,\"Reserved\":[0,0,0],\"LD\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"FamilyID\":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ImageID\":[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"Version\":1,\"GuestSVN\":2,\"IDKeyAlgorithm\":1,\"AuthorKeyAlgorithm\":0,\"IDKeySignature\":{\"RComp\":[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"SComp\":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},\"IDPublicKey\":{\"Curve\":2,\"Reserved\":0,\"QX\":[232, 89, 123, 129, 164, 149, 106, 158, 30, 129, 186, 118, 159, 142, 208, 153, 226, 192, 206, 204, 104, 138, 141, 59, 116, 63, 123, 15, 31, 179, 197, 46, 247, 123, 60, 149, 102, 82, 97, 86, 100, 126, 196, 176, 35, 77, 159, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\"QY\":[161, 162, 10, 16, 51, 52, 146, 156, 136, 201, 234, 208, 41, 116, 134, 232, 159, 138, 4, 122, 139, 13, 29, 63, 157, 39, 79, 195, 44, 181, 67, 80, 155, 82, 179, 236, 167, 82, 55, 217, 45, 38, 2, 166, 158, 122, 131, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]},\"AuthorKeySignature\":{\"RComp\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"SComp\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},\"AuthorPublicKey\":{\"Curve\":0,\"Reserved\":0,\"QX\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"QY\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}"),
			wantErr:             false,
		},
		"invalid launch digest length": {
			launchDigest: "",
			wantErr:      true,
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)
			require := require.New(t)

			// create in-memory filesystem
			fs := afero.NewMemMapFs()

			// create launch digest file
			require.NoError(afero.WriteFile(fs, "launch-digest", []byte(tc.launchDigest), 0o644))

			err := generate(fs, "launch-digest", "id-block-out", "id-auth-out", "id-block-igvm-out")
			if tc.wantErr {
				assert.Error(err)
				return
			}
			assert.NoError(err)

			// read ID block
			idBlock, err := afero.ReadFile(fs, "id-block-out")
			assert.NoError(err)

			// read ID auth block
			idAuthBlock, err := afero.ReadFile(fs, "id-auth-out")
			assert.NoError(err)

			// read IGVM ID Block JSON
			idBlockIGVMJson, err := afero.ReadFile(fs, "id-block-igvm-out")
			assert.NoError(err)

			if tc.expectedIDAuthBlock != nil {
				assert.Equal(*tc.expectedIDBlock, string(idBlock))
			} else {
				assert.NotEmpty(idBlock)
			}
			if tc.expectedIDAuthBlock != nil {
				assert.Equal(*tc.expectedIDAuthBlock, string(idAuthBlock))
			} else {
				assert.NotEmpty(idAuthBlock)
			}
			if tc.expectedIDBlockIGVM != nil {
				assert.JSONEq(*tc.expectedIDBlockIGVM, string(idBlockIGVMJson))
			} else {
				assert.NotEmpty(idBlockIGVMJson)
			}
		})
	}
}

func toPtr[T any](t T) *T {
	return &t
}
