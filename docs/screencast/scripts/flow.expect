#!/usr/bin/expect -f
# Note: Expects to be able to run 'sudo install' without a password

set timeout -1
set send_human {0.05 0 1 0.05 0.3}
set CTRLC \003
set CTRLX \030
set record_name [lindex $argv 0];

proc expect_prompt {} {
    # This matches the trailing 0m of our ANSI control sequence. See PS1 in Dockerfile.
    expect "0m "
}

proc run_command {cmd} {
    send -h "$cmd"
    send "\r"
    expect -timeout 1
}


# Start recording
spawn asciinema rec --overwrite /recordings/flow.cast
send "\r"
expect_prompt

run_command "# Deploy the Contrast Coordinator"
expect_prompt
run_command "kubectl apply -f coordinator.yaml"
expect_prompt
sleep 3
run_command "coordinator=`kubectl get svc coordinator -o=jsonpath='\{.status.loadBalancer.ingress\[0\].ip\}'`"
expect_prompt
# run_command "echo \$coordinator"
# expect_prompt

run_command "# Generate workload policies and manifest"
expect_prompt
run_command "contrast generate deployment/"
expect_prompt
run_command "cat manifest.json | jq"
expect_prompt

run_command "# Set the manifest at the coordinator"
expect_prompt
run_command "contrast set -c \$coordinator:1313 deployment/"
expect_prompt

run_command "# Apply the deployment"
expect_prompt
run_command "kubectl apply -f deployment/"
expect_prompt

run_command "# End-users can verify the Contrast Coordinator"
expect_prompt
run_command "contrast verify -c \$coordinator:1313"
expect_prompt
run_command "ls ./verify"
expect_prompt
run_command "# mesh-root.pem can be used to securely connect to the service"
expect_prompt

# Stop recording
send "exit"
