"use strict";(globalThis.webpackChunkcontrast_docs=globalThis.webpackChunkcontrast_docs||[]).push([[2227],{13443:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/contrast_pki.drawio-a2442a1eeb081612c5ad587a58589ad4.svg"},14816:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"architecture/components/service-mesh","title":"Service mesh","description":"The Contrast service mesh secures the communication of the workload by automatically","source":"@site/versioned_docs/version-1.11/architecture/components/service-mesh.md","sourceDirName":"architecture/components","slug":"/architecture/components/service-mesh","permalink":"/contrast/pr-preview/pr-1835/1.11/architecture/components/service-mesh","draft":false,"unlisted":false,"editUrl":"https://github.com/edgelesssys/contrast/edit/main/docs/versioned_docs/version-1.11/architecture/components/service-mesh.md","tags":[],"version":"1.11","frontMatter":{},"sidebar":"docs","previous":{"title":"Coordinator","permalink":"/contrast/pr-preview/pr-1835/1.11/architecture/components/coordinator"},"next":{"title":"Overview","permalink":"/contrast/pr-preview/pr-1835/1.11/architecture/attestation/overview"}}');var s=t(74848),r=t(28453);const c={},a="Service mesh",o={},h=[{value:"Service mesh startup enforcement",id:"service-mesh-startup-enforcement",level:2},{value:"Configuring the proxy",id:"configuring-the-proxy",level:2},{value:"Ingress",id:"ingress",level:3},{value:"Egress",id:"egress",level:3},{value:"Public key Infrastructure",id:"public-key-infrastructure",level:2},{value:"Certificate issuance",id:"certificate-issuance",level:3},{value:"Certificate rotation",id:"certificate-rotation",level:3},{value:"Service mesh integration",id:"service-mesh-integration",level:3},{value:"Summary of certificate roles",id:"summary-of-certificate-roles",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"service-mesh",children:"Service mesh"})}),"\n",(0,s.jsxs)(n.p,{children:["The Contrast service mesh secures the communication of the workload by automatically\nwrapping the network traffic inside mutual TLS (mTLS) connections. The\nverification of the endpoints in the connection establishment is based on\ncertificates that are part of the\n",(0,s.jsx)(n.a,{href:"#public-key-infrastructure",children:"PKI of the Coordinator"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The service mesh can be enabled on a per-workload basis by adding a service mesh\nconfiguration to the workload's object annotations. During the ",(0,s.jsx)(n.code,{children:"contrast generate"}),"\nstep, the service mesh is added as a ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/pods/sidecar-containers/",children:"sidecar\ncontainer"})," to\nall workloads which have a specified configuration. The service mesh container first\nsets up ",(0,s.jsx)(n.code,{children:"iptables"})," rules based on its configuration and then starts\n",(0,s.jsx)(n.a,{href:"https://www.envoyproxy.io/",children:"Envoy"})," for TLS origination and termination."]}),"\n",(0,s.jsx)(n.h2,{id:"service-mesh-startup-enforcement",children:"Service mesh startup enforcement"}),"\n",(0,s.jsxs)(n.p,{children:["Since Contrast doesn't yet enforce the order in which the containers are started\n(see ",(0,s.jsx)(n.a,{href:"/contrast/pr-preview/pr-1835/1.11/architecture/features-limitations",children:"Limitations"}),"), we deny all incoming connections\nuntil the service mesh is fully configured.\nA systemd unit inside the podVM creates this deny rule.\nThe kata-agent systemd unit requires that this unit successfully runs and exits,\nbefore itself it can be started.\nTherefore, the deny rule is in place before any containers can be started."]}),"\n",(0,s.jsx)(n.p,{children:"If the user specifies no service mesh annotations, the Initializer takes care\nof removing the deny rule."}),"\n",(0,s.jsx)(n.h2,{id:"configuring-the-proxy",children:"Configuring the proxy"}),"\n",(0,s.jsx)(n.p,{children:"The service mesh container can be configured using the following object annotations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"contrast.edgeless.systems/servicemesh-ingress"})," to configure ingress."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"contrast.edgeless.systems/servicemesh-egress"})," to configure egress."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"contrast.edgeless.systems/servicemesh-admin-interface-port"})," to configure the Envoy\nadmin interface. If not specified, no admin interface will be started."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you aren't using the automatic service mesh injection and want to configure the\nservice mesh manually, set the environment variables ",(0,s.jsx)(n.code,{children:"CONTRAST_INGRESS_PROXY_CONFIG"}),",\n",(0,s.jsx)(n.code,{children:"CONTRAST_EGRESS_PROXY_CONFIG"})," and ",(0,s.jsx)(n.code,{children:"CONTRAST_ADMIN_PORT"})," in the service mesh sidecar directly."]}),"\n",(0,s.jsx)(n.h3,{id:"ingress",children:"Ingress"}),"\n",(0,s.jsxs)(n.p,{children:["All TCP ingress traffic is routed over Envoy by default. Since we use\n",(0,s.jsx)(n.a,{href:"https://docs.kernel.org/networking/tproxy.html",children:"TPROXY"}),", the destination address\nremains the same throughout the packet handling."]}),"\n",(0,s.jsxs)(n.p,{children:["Any incoming connection is required to present a client certificate signed by the\n",(0,s.jsx)(n.a,{href:"#summary-of-certificate-roles",children:"mesh CA certificate"}),".\nEnvoy presents a certificate chain of the mesh\ncertificate of the workload and the intermediate CA certificate as the server certificate."]}),"\n",(0,s.jsxs)(n.p,{children:["If the deployment contains workloads which should be reachable from outside the\nService Mesh, while still handing out the certificate chain, disable client\nauthentication by setting the annotation ",(0,s.jsx)(n.code,{children:"contrast.edgeless.systems/servicemesh-ingress"})," as\n",(0,s.jsx)(n.code,{children:"<name>#<port>#false"}),". Separate multiple entries with ",(0,s.jsx)(n.code,{children:"##"}),". You can choose any\ndescriptive string identifying the service on the given port for the ",(0,s.jsx)(n.code,{children:"<name>"})," field,\nas it's only informational."]}),"\n",(0,s.jsxs)(n.p,{children:["Disable redirection and TLS termination altogether by specifying\n",(0,s.jsx)(n.code,{children:"<name>#<port>#true"}),". This can be beneficial if the workload itself handles TLS\non that port or if the information exposed on this port is non-sensitive."]}),"\n",(0,s.jsx)(n.p,{children:"The following example workload exposes a web service on port 8080 and metrics on\nport 7890. The web server is exposed to a 3rd party end-user which wants to\nverify the deployment, therefore it's still required that the server hands out\nit certificate chain signed by the mesh CA certificate. The metrics should be\nexposed via TCP without TLS."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web\n  annotations:\n    contrast.edgeless.systems/servicemesh-ingress: "web#8080#false##metrics#7890#true"\nspec:\n  replicas: 1\n  template:\n    spec:\n      runtimeClassName: contrast-cc\n      containers:\n        - name: web-svc\n          image: ghcr.io/edgelesssys/frontend:v1.2.3@...\n          ports:\n            - containerPort: 8080\n              name: web\n            - containerPort: 7890\n              name: metrics\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When invoking ",(0,s.jsx)(n.code,{children:"contrast generate"}),", the resulting deployment will be injected with the\nContrast service mesh as an init container:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# ...\nspec:\n    runtimeClassName: contrast-cc\n    containers:\n      - name: web-svc\n        image: ghcr.io/edgelesssys/frontend:v1.2.3@...\n        ports:\n          - containerPort: 8080\n            name: web\n          - containerPort: 7890\n            name: metrics\n    initContainers:\n      - env:\n          - name: CONTRAST_INGRESS_PROXY_CONFIG\n            value: "web#8080#false##metrics#7890#true"\n        image: "ghcr.io/edgelesssys/contrast/service-mesh-proxy:v1.11.0@sha256:c3f03ea8b5e7630b0878a79154292af144bc63aa1fa7ebda6e239fecad84852e"\n        name: contrast-service-mesh\n        restartPolicy: Always\n        securityContext:\n          capabilities:\n            add:\n              - NET_ADMIN\n          privileged: true\n        volumeMounts:\n          - name: contrast-secrets\n            mountPath: /contrast\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note, that changing the environment variables of the sidecar container directly will\nonly have an effect if the workload isn't configured to automatically generate a\nservice mesh component on ",(0,s.jsx)(n.code,{children:"contrast generate"}),". Otherwise, the service mesh sidecar\ncontainer will be regenerated on every invocation of the command."]}),"\n",(0,s.jsx)(n.h3,{id:"egress",children:"Egress"}),"\n",(0,s.jsx)(n.p,{children:"To be able to route the egress traffic of the workload through Envoy, the remote\nendpoints' IP address and port must be configurable."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Choose an IP address inside the ",(0,s.jsx)(n.code,{children:"127.0.0.0/8"})," CIDR and a port not yet in use\nby the pod."]}),"\n",(0,s.jsx)(n.li,{children:"Configure the workload to connect to this IP address and port."}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"<name>#<chosen IP>:<chosen port>#<original-hostname-or-ip>:<original-port>"}),"\nas the ",(0,s.jsx)(n.code,{children:"contrast.edgeless.systems/servicemesh-egress"})," workload annotation. Separate multiple\nentries with ",(0,s.jsx)(n.code,{children:"##"}),". Choose any string identifying the service on the given port as\n",(0,s.jsx)(n.code,{children:"<name>"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This redirects the traffic over Envoy. The endpoint must present a valid\ncertificate chain which must be verifiable with the\n",(0,s.jsx)(n.a,{href:"#summary-of-certificate-roles",children:"mesh CA certificate"}),".\nFurthermore, Envoy uses a certificate chain with the mesh certificate of the workload\nand the intermediate CA certificate as the client certificate."]}),"\n",(0,s.jsxs)(n.p,{children:["The following example workload has no ingress connections and two egress\nconnection to different microservices. The microservices are part\nof the confidential deployment. One is reachable under ",(0,s.jsx)(n.code,{children:"billing-svc:8080"})," and\nthe other under ",(0,s.jsx)(n.code,{children:"cart-svc:8080"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web\n  annotations:\n    contrast.edgeless.systems/servicemesh-egress: "billing#127.137.0.1:8081#billing-svc:8080##cart#127.137.0.2:8081#cart-svc:8080"\nspec:\n  replicas: 1\n  template:\n    spec:\n      runtimeClassName: contrast-cc\n      containers:\n        - name: currency-conversion\n          image: ghcr.io/edgelesssys/conversion:v1.2.3@...\n'})}),"\n",(0,s.jsx)(n.h2,{id:"public-key-infrastructure",children:"Public key Infrastructure"}),"\n",(0,s.jsx)(n.p,{children:"The Coordinator establishes a public key infrastructure (PKI) for all workloads defined in the manifest. It holds three types of certificates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Root CA certificate"}),": A long-lived certificate used to sign the intermediate CA certificate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Intermediate CA certificate"}),": Shares a private key with the mesh CA certificate and is signed by the root CA. This private key is used to sign mesh certificates."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mesh CA certificate"}),": Used to sign workload-specific mesh certificates."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"PKI certificate chain",src:t(13443).A+""})}),"\n",(0,s.jsx)(n.h3,{id:"certificate-issuance",children:"Certificate issuance"}),"\n",(0,s.jsx)(n.p,{children:"Once a workload pod\u2019s attestation is successfully verified by the Coordinator, it receives:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"mesh certificate"})]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"mesh CA certificate"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The mesh certificate includes X.509 extensions based on the workload\u2019s attestation document and can be used as a client or server certificate in TLS connections. It proves to the remote party that the workload was verified by the Coordinator. The remote party can verify the mesh certificate using the mesh CA certificate."}),"\n",(0,s.jsx)(n.p,{children:"While developers may use these certificates independently, they're also automatically used by Contrast\u2019s service mesh for secure communication."}),"\n",(0,s.jsx)(n.h3,{id:"certificate-rotation",children:"Certificate rotation"}),"\n",(0,s.jsx)(n.p,{children:"Every time the manifest is updated, the Coordinator rotates the intermediate private key. As a result, both the intermediate CA certificate and the mesh CA certificate are renewed."}),"\n",(0,s.jsx)(n.p,{children:"This mechanism protects against scenarios where a workload owner introduces unauthorized containers after verification. If a user doesn't trust the workload owner, they should only trust mesh certificates signed by the mesh CA certificate obtained during their own verification process."}),"\n",(0,s.jsx)(n.p,{children:"Similarly, the service mesh uses the mesh CA certificate issued when the workload was verified. Any change to the manifest requires a new rollout of the services, as the mesh CA certificate will change."}),"\n",(0,s.jsx)(n.h3,{id:"service-mesh-integration",children:"Service mesh integration"}),"\n",(0,s.jsx)(n.p,{children:"The service mesh relies on the mesh certificates to establish mutual TLS (mTLS) connections between workloads."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"During pod startup, the Initializer requests a mesh certificate from the Coordinator."}),"\n",(0,s.jsx)(n.li,{children:"If attestation is successful, the Coordinator returns a mesh certificate and the mesh CA certificate."}),"\n",(0,s.jsx)(n.li,{children:"These certificates are used to authenticate and authorize communication within the service mesh."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Only workloads that have been verified based on the current manifest and signed by the corresponding mesh CA certificate are trusted by other services in the mesh."}),"\n",(0,s.jsx)(n.h3,{id:"summary-of-certificate-roles",children:"Summary of certificate roles"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root CA Certificate"}),"\nReturned during Coordinator verification. Can be used to verify mesh certificates if the data owner fully trusts all future manifests and updates."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Intermediate CA Certificate"}),"\nLinks the root CA to the mesh CA. Included in certificate chains for validation purposes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Mesh CA Certificate"}),"\nUsed to verify mesh certificates. Bound to a specific manifest version and changes when the manifest is updated."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Mesh Certificate"}),"\nIssued to workloads after successful attestation. Contains metadata from the attestation document and is used in mTLS communication within the service mesh."]}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);