"use strict";(self.webpackChunkcontrast_docs=self.webpackChunkcontrast_docs||[]).push([[3069],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}},38270:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"examples/vault","title":"Vault","description":"This tutorial guides you through deploying a Vault as a confidential Contrast deployment by using the build-in","source":"@site/docs/examples/vault.md","sourceDirName":"examples","slug":"/examples/vault","permalink":"/contrast/pr-preview/pr-1503/next/examples/vault","draft":false,"unlisted":false,"editUrl":"https://github.com/edgelesssys/contrast/edit/main/docs/docs/examples/vault.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Encrypted volume mount","permalink":"/contrast/pr-preview/pr-1503/next/examples/mysql"},"next":{"title":"Workload deployment","permalink":"/contrast/pr-preview/pr-1503/next/deployment"}}');var s=n(74848),r=n(28453);const a={},o="Vault",l={},d=[{value:"Sealing and Unsealing of Vaults",id:"sealing-and-unsealing-of-vaults",level:2},{value:"Transit secrets engine API of Contrast Coordinator",id:"transit-secrets-engine-api-of-contrast-coordinator",level:2},{value:"Secure endpoints with mutual TLS",id:"secure-endpoints-with-mutual-tls",level:3},{value:"Role of <code>workloadSecretID</code>",id:"role-of-workloadsecretid",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps to deploy Vault with Contrast",id:"steps-to-deploy-vault-with-contrast",level:2},{value:"Download the deployment files",id:"download-the-deployment-files",level:3},{value:"Deploy the Contrast runtime",id:"deploy-the-contrast-runtime",level:3},{value:"Download the Contrast Coordinator resource",id:"download-the-contrast-coordinator-resource",level:3},{value:"Generate policy annotations and manifest",id:"generate-policy-annotations-and-manifest",level:3},{value:"Deploy the Coordinator",id:"deploy-the-coordinator",level:3},{value:"Set the manifest",id:"set-the-manifest",level:3},{value:"Deploy Vault",id:"deploy-vault",level:3},{value:"Verifying the deployment as a user",id:"verifying-the-deployment-as-a-user",level:2},{value:"Verifying the Coordinator",id:"verifying-the-coordinator",level:3},{value:"Auditing the manifest history and artifacts",id:"auditing-the-manifest-history-and-artifacts",level:3},{value:"Connecting to the application",id:"connecting-to-the-application",level:3},{value:"Updating the deployment",id:"updating-the-deployment",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{TabItem:n,Tabs:i}=t;return n||u("TabItem",!0),i||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"vault",children:"Vault"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["This tutorial guides you through deploying a Vault as a confidential Contrast deployment by using the build-in\ntransit engine API for Sealing/Unsealing based on the ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/architecture/secrets#workload-secrets",children:"workload secret"})," of Contrast."]})}),"\n",(0,s.jsx)(t.p,{children:"Vaults are identity-based secrets and encryption management systems, which provide encryption services that are gated by authentication and authorization methods to ensure\nsecure, auditable and restricted access to secrets, such as API keys, passwords, encryption keys or certificates.\nVault applications like OpenBao or HashiCorp provide a unified interface to any secret, while achieving tight access and recording a detailed audit log."}),"\n",(0,s.jsx)(t.p,{children:"Contrast allows to leverage these advantages of having a secure secret and encryption\nmanagement system into a confidential computing environment, further shielding the secrets from the workload operator."}),"\n",(0,s.jsx)(t.h2,{id:"sealing-and-unsealing-of-vaults",children:"Sealing and Unsealing of Vaults"}),"\n",(0,s.jsx)(t.p,{children:"Sealing ensures that all sensitive data within the Vault remains inaccessible and protected when the system is not in active use.\nIt provides a security boundary that prevents unauthorized access during restarts or shutdowns."}),"\n",(0,s.jsxs)(t.p,{children:["Unsealing is required to transition Vault into an operational state, allowing authorized access to stored secrets.\nVault implementations by default use a set of unseal keys derived from as master key, building up on Shamir's Secret Sharing scheme.\nFurther to auto-unseal Vaults, the process can be delegated to another already initialized Vault by using\nan exposed ",(0,s.jsx)(t.a,{href:"https://openbao.org/api-docs/secret/transit/",children:"transit secrets engine API"})," as the unsealing mechanism."]}),"\n",(0,s.jsx)(t.h2,{id:"transit-secrets-engine-api-of-contrast-coordinator",children:"Transit secrets engine API of Contrast Coordinator"}),"\n",(0,s.jsx)(t.p,{children:"To automate the unsealing process in confidential deployments of Vault instances, the coordinator exposes a compatible transit secrets engine API on port 8200.\nVault deployments can be configured to integrate this transit engine to enable auto-unsealing,\nensuring immediate operational readiness and seamless integration within the secure Contrast environment."}),"\n",(0,s.jsx)(t.h3,{id:"secure-endpoints-with-mutual-tls",children:"Secure endpoints with mutual TLS"}),"\n",(0,s.jsx)(t.p,{children:"All communication between the transit secrets engine API and Vault is secured through mutual TLS (mTLS), enforced by Contrast\u2019s service mesh.\nOnly entities presenting a valid mesh-issued certificate\u2014corresponding to the current state of the Contrast deployment\u2014are trusted."}),"\n",(0,s.jsx)(t.p,{children:"The Coordinator issues itself a valid certificate at the time of the transit secrets engine API call,\nwhile the Vault deloyment obtains its certificate after successful validation by the mesh API."}),"\n",(0,s.jsxs)(t.h3,{id:"role-of-workloadsecretid",children:["Role of ",(0,s.jsx)(t.code,{children:"workloadSecretID"})]}),"\n",(0,s.jsxs)(t.p,{children:["To support persistence in the auto-unsealing process, the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," is used to derive the encryption key utilized by the Transit Secrets Engine. Beyond key derivation, the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," also plays a critical role in authorization."]}),"\n",(0,s.jsxs)(t.p,{children:["Access to a specific encryption key via the transit secrets engine API is permitted only if the requested key name matches the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," embedded in the corresponding certificate extension of the Contrast mesh certificate. This ensures that each entity is cryptographically bound to its own set of encryption keys within the engine."]}),"\n",(0,s.jsxs)(t.p,{children:["For more details on how the workload secret is used, see ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/architecture/secrets#workload-secrets",children:"Workload\nSecrets"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Installed Contrast CLI"}),"\n",(0,s.jsxs)(t.li,{children:["A running Kubernetes cluster with support for confidential containers, either on ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/getting-started/cluster-setup",children:"AKS"})," or on ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/getting-started/bare-metal",children:"bare metal"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"steps-to-deploy-vault-with-contrast",children:"Steps to deploy Vault with Contrast"}),"\n",(0,s.jsx)(t.h3,{id:"download-the-deployment-files",children:"Download the deployment files"}),"\n",(0,s.jsx)(t.p,{children:"The Vault deployment files are part of the Contrast release. You can download them by running:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"curl -fLO https://github.com/edgelesssys/contrast/releases/latest/download/\n//TODO(jmxnzo): generate these\n--create-dirs --output-dir deployment\n"})}),"\n",(0,s.jsx)(t.h3,{id:"deploy-the-contrast-runtime",children:"Deploy the Contrast runtime"}),"\n",(0,s.jsxs)(t.p,{children:["Contrast depends on a ",(0,s.jsxs)(t.a,{href:"/contrast/pr-preview/pr-1503/next/components/runtime",children:["custom Kubernetes ",(0,s.jsx)(t.code,{children:"RuntimeClass"})]}),",\nwhich needs to be installed to the cluster initially.\nThis consists of a ",(0,s.jsx)(t.code,{children:"RuntimeClass"})," resource and a ",(0,s.jsx)(t.code,{children:"DaemonSet"})," that performs installation on worker nodes.\nThis step is only required once for each version of the runtime.\nIt can be shared between Contrast deployments."]}),"\n",(0,s.jsxs)(i,{queryString:"platform",children:[(0,s.jsx)(n,{value:"aks-clh-snp",label:"AKS",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"kubectl apply -f https://github.com/edgelesssys/contrast/releases/latest/download/runtime-aks-clh-snp.yml\n"})})}),(0,s.jsx)(n,{value:"k3s-qemu-snp",label:"Bare metal (SEV-SNP)",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"kubectl apply -f https://github.com/edgelesssys/contrast/releases/latest/download/runtime-k3s-qemu-snp.yml\n"})})}),(0,s.jsx)(n,{value:"k3s-qemu-tdx",label:"Bare metal (TDX)",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"kubectl apply -f https://github.com/edgelesssys/contrast/releases/latest/download/runtime-k3s-qemu-tdx.yml\n"})})})]}),"\n",(0,s.jsx)(t.h3,{id:"download-the-contrast-coordinator-resource",children:"Download the Contrast Coordinator resource"}),"\n",(0,s.jsx)(t.p,{children:"Download the Kubernetes resource of the Contrast Coordinator, comprising a single replica deployment and a\nLoadBalancer service. Put it next to your resources:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"curl -fLO https://github.com/edgelesssys/contrast/releases/latest/download/coordinator.yml --output-dir deployment\n"})}),"\n",(0,s.jsx)(t.h3,{id:"generate-policy-annotations-and-manifest",children:"Generate policy annotations and manifest"}),"\n",(0,s.jsxs)(t.p,{children:["Run the ",(0,s.jsx)(t.code,{children:"generate"})," command to generate the execution policies and add them as\nannotations to your deployment files. A ",(0,s.jsx)(t.code,{children:"manifest.json"})," file with the reference values\nof your deployment will be created:"]}),"\n",(0,s.jsxs)(i,{queryString:"platform",children:[(0,s.jsx)(n,{value:"aks-clh-snp",label:"AKS",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"contrast generate --reference-values aks-clh-snp deployment/\n"})})}),(0,s.jsxs)(n,{value:"k3s-qemu-snp",label:"Bare metal (SEV-SNP)",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"contrast generate --reference-values k3s-qemu-snp deployment/\n"})}),(0,s.jsx)(t.admonition,{title:"Missing TCB values",type:"note",children:(0,s.jsxs)(t.p,{children:["On bare-metal SEV-SNP, ",(0,s.jsx)(t.code,{children:"contrast generate"})," is unable to fill in the ",(0,s.jsx)(t.code,{children:"MinimumTCB"})," values as they can vary between platforms.\nThey will have to be filled in manually.\nIf you don't know the correct values use ",(0,s.jsx)(t.code,{children:'{"BootloaderVersion":255,"TEEVersion":255,"SNPVersion":255,"MicrocodeVersion":255}'})," and observe the real values in the error messages in the following steps. This should only be done in a secure environment. Note that the values will differ between CPU models."]})})]}),(0,s.jsxs)(n,{value:"k3s-qemu-tdx",label:"Bare metal (TDX)",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"contrast generate --reference-values k3s-qemu-tdx deployment/\n"})}),(0,s.jsx)(t.admonition,{title:"Missing TCB values",type:"note",children:(0,s.jsxs)(t.p,{children:["On bare-metal TDX, ",(0,s.jsx)(t.code,{children:"contrast generate"})," is unable to fill in the ",(0,s.jsx)(t.code,{children:"MinimumTeeTcbSvn"})," and ",(0,s.jsx)(t.code,{children:"MrSeam"})," TCB values as they can vary between platforms.\nThey will have to be filled in manually.\nIf you don't know the correct values use ",(0,s.jsx)(t.code,{children:"ffffffffffff\x3c!--  --\x3effffffffffffffffffff"})," and ",(0,s.jsx)(t.code,{children:"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"})," respectively and observe the real values in the error messages in the following steps. This should only be done in a secure environment."]})})]})]}),"\n",(0,s.jsxs)(t.admonition,{title:"Runtime class and Initializer",type:"note",children:[(0,s.jsxs)(t.p,{children:["The deployment YAML shipped for this demo is already configured to be used with Contrast.\nA ",(0,s.jsx)(t.a,{href:"../components/runtime",children:"runtime class"})," ",(0,s.jsx)(t.code,{children:"contrast-cc"}),"\nwas added to the pods to signal they should be run as Confidential Containers. During the generation process,\nthe Contrast ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/components/overview#the-initializer",children:"Initializer"})," will be added as an init container to these\nworkloads. It will attest the pod to the Coordinator and fetch the workload certificates and the workload secret."]}),(0,s.jsxs)(t.p,{children:["Further, the deployment YAML is also configured with the Contrast ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/components/service-mesh",children:"service mesh"}),".\nThe configured service mesh proxy provides transparent protection for the communication between\nthe MySQL server and client."]})]}),"\n",(0,s.jsx)(t.h3,{id:"deploy-the-coordinator",children:"Deploy the Coordinator"}),"\n",(0,s.jsx)(t.p,{children:"Deploy the Coordinator resource first by applying its resource definition:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"kubectl apply -f deployment/coordinator.yml\n"})}),"\n",(0,s.jsx)(t.h3,{id:"set-the-manifest",children:"Set the manifest"}),"\n",(0,s.jsx)(t.p,{children:"Configure the Coordinator with a manifest. It might take up to a few minutes\nfor the load balancer to be created and the Coordinator being available."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'coordinator=$(kubectl get svc coordinator -o=jsonpath=\'{.status.loadBalancer.ingress[0].ip}\')\necho "The user API of your Contrast Coordinator is available at $coordinator:1313"\ncontrast set -c "${coordinator}:1313" deployment/\n'})}),"\n",(0,s.jsx)(t.p,{children:"The CLI will use the reference values from the manifest to attest the Coordinator deployment\nduring the TLS handshake. If the connection succeeds, it's ensured that the Coordinator\ndeployment hasn't been tampered with."}),"\n",(0,s.jsx)(t.h3,{id:"deploy-vault",children:"Deploy Vault"}),"\n",(0,s.jsx)(t.p,{children:"Now that the Coordinator has a manifest set, which defines the Vault deployment as an allowed workload,\nwe can deploy the application:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"kubectl apply -f deployment/\n"})}),"\n",(0,s.jsx)(t.admonition,{title:"Persistent workload secrets",type:"note",children:(0,s.jsxs)(t.p,{children:["During the initialization process of the workload pod, the Contrast Initializer\nsends an attestation report to the Coordinator and receives a workload secret\nderived from the Coordinator's secret seed and the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," specified in the\nmanifest, and writes it to a secure in-memory ",(0,s.jsx)(t.code,{children:"volumeMount"}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["The Vault deployment is defined as a StatefulSet using the OpenBao Vault image, with a mounted block device for persistent storage.\nA Contrast Initializer, running as an init container, uses the workload secret located at ",(0,s.jsx)(t.code,{children:"/contrast/secrets/workload-secret-seed"})," to\ngenerate an encryption key and initialize the block device as a LUKS-encrypted partition.\nBefore the Vault container starts, the Initializer opens the LUKS device using the generated key.\nThis unlocked device is then mounted by the Vault container and used as the backend storage volume.\nFor the Vault application, this process is entirely transparent, and the device behaves like a standard volume mount."]}),"\n",(0,s.jsxs)(t.p,{children:["Because the ",(0,s.jsx)(t.code,{children:"workload-secret-seed"})," is derived from the associated ",(0,s.jsx)(t.code,{children:"workloadSecretID"}),",\nany change to the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," after the block device has been initialized will result in deriving an invalid encryption key,\nmaking the mounted block device undecrybtable."]}),"\n",(0,s.jsx)(t.admonition,{title:"Inter-deployment communication",type:"note",children:(0,s.jsxs)(t.p,{children:["The Contrast Coordinator issues mesh certificates after successfully validating workloads.\nThese certificates can be used for secure inter-deployment communication.\nThe Initializer sends an attestation report to the Coordinator,\nretrieves the a service mesh certificate bound to it's provided public key, containing the certificate chain, as well as the current mesh CA cert.\nThe Initializer then writes them to a ",(0,s.jsx)(t.code,{children:"volumeMount"}),", allowing to build up the secure mTLS connections based on the service mesh.\nThe received service mesh certificate also holds the certificate extension of the ",(0,s.jsx)(t.code,{children:"workloadSecretID"}),",\nwhich is used to allow the authorization to a certain encryption key on the transit engine API."]})}),"\n",(0,s.jsxs)(t.p,{children:["The Vault's TCP listener is configured to accept connections only from trusted certificates issued under the root mesh CA,\neffectively restricting communication to attested Contrast deployments.\nThe Coordinator\u2019s transit secrets engine API authorizes requests based on the ",(0,s.jsx)(t.code,{children:"workloadSecretID"}),",\nwhich is embedded in a certificate extension and must match the target endpoint.\nAs previously noted, updating the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," after initializing the LUKS device will make it inaccessible,\ndue to a mismatch in the derived encryption key.\nTherefore, it is critical to ensure that the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," is correctly aligned with the intended endpoint\nspecified in Vault\u2019s sealing configuration before the first ",(0,s.jsx)(t.code,{children:"contrast set"})," is executed."]}),"\n",(0,s.jsx)(t.h2,{id:"verifying-the-deployment-as-a-user",children:"Verifying the deployment as a user"}),"\n",(0,s.jsx)(t.p,{children:"In different scenarios, users of an app may want to verify its security and identity before sharing data, for example, before connecting to the database.\nWith Contrast, a user only needs a single remote-attestation step to verify the deployment - regardless of the size or scale of the deployment.\nContrast is designed such that, by verifying the Coordinator, the user transitively verifies those systems the Coordinator has already verified or will verify in the future.\nSuccessful verification of the Coordinator means that the user can be sure that the given manifest will be enforced."}),"\n",(0,s.jsx)(t.h3,{id:"verifying-the-coordinator",children:"Verifying the Coordinator"}),"\n",(0,s.jsx)(t.p,{children:"A user can verify the Contrast deployment using the verify\ncommand:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'contrast verify -c "${coordinator}:1313" -m manifest.json\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The CLI will verify the Coordinator via remote attestation using the reference values from a given manifest. This manifest needs\nto be communicated out of band to everyone wanting to verify the deployment, as the ",(0,s.jsx)(t.code,{children:"verify"})," command checks\nif the currently active manifest at the Coordinator matches the manifest given to the CLI. If the command succeeds,\nthe Coordinator deployment was successfully verified to be running in the expected Confidential\nComputing environment with the expected code version. The Coordinator will then return its\nconfiguration over the established TLS channel. The CLI will store this information, namely the root\ncertificate of the mesh (",(0,s.jsx)(t.code,{children:"mesh-ca.pem"}),") and the history of manifests, into the ",(0,s.jsx)(t.code,{children:"verify/"})," directory.\nIn addition, the policies referenced in the manifest history are also written into the same directory."]}),"\n",(0,s.jsx)(t.h3,{id:"auditing-the-manifest-history-and-artifacts",children:"Auditing the manifest history and artifacts"}),"\n",(0,s.jsxs)(t.p,{children:["In the next step, the Coordinator configuration that was written by the ",(0,s.jsx)(t.code,{children:"verify"})," command needs to be audited.\nA user of the application should inspect the manifest and the referenced policies. They could delegate\nthis task to an entity they trust."]}),"\n",(0,s.jsx)(t.h3,{id:"connecting-to-the-application",children:"Connecting to the application"}),"\n",(0,s.jsxs)(t.p,{children:["Other confidential containers can securely connect to the Vault server via the\n",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/components/service-mesh",children:"Service Mesh"}),".\nAny verified deployment with a valid Service Mesh cerrtificate is trusted by the Vault server application and thus can execute Vault-related operations\nThe configured ",(0,s.jsx)(t.code,{children:"openbao-client"})," deployment is responsible for executing Vault-related operations,\nincluding initialization, secret creation, and sealing instructions.\nFor more information on the Vault management and administration, please follow the official ",(0,s.jsx)(t.a,{href:"https://openbao.org/docs/",children:"OpenBao documentation"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"updating-the-deployment",children:"Updating the deployment"}),"\n",(0,s.jsx)(t.p,{children:"Because the workload secret is derived from the workloadSecretID specified in the manifest\u2014rather\nthan tied to an individual pod\u2014the Contrast Initializer can deterministically regenerate the same key u\npon pod restart and successfully unlock the previously initialized LUKS-encrypted device."}),"\n",(0,s.jsxs)(t.p,{children:["As mentioned in the chapter ",(0,s.jsx)(t.a,{href:"/contrast/pr-preview/pr-1503/next/examples/vault#deploy-vault",children:"Deploy Vault"}),", when using encrypted block devices in Contrast,\nit is critical to ensure that the ",(0,s.jsx)(t.code,{children:"workloadSecretID"})," remains consistent.\nAny change to this value will prevent the Contrast Initializer from deriving the correct decryption key,\nmaking the LUKS device inaccessible."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, after making changes to the deployment files, the runtime policies\nneed to be regenerated with ",(0,s.jsx)(t.code,{children:"contrast generate"})," and the new manifest needs to be\nset using ",(0,s.jsx)(t.code,{children:"contrast set"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'contrast generate deployment/\ncontrast set -c "${coordinator}:1313" deployment/\n'})}),"\n",(0,s.jsx)(t.p,{children:"The new deployment can then be applied by running:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"kubectl rollout restart statefulset/openbao-server\nkubectl rollout restart deployment/openbao-client\n"})}),"\n",(0,s.jsx)(t.p,{children:"When a new Vault backend pod starts, it launches the Contrast Initializer during its startup sequence.\nThe Initializer receives the same workload secret as before, allowing it to derive the correct encryption key\nand unlock the existing LUKS-encrypted device.\nThis ensures that all previously stored data in the Vault backend remains accessible through the reattached encrypted volume.\nOnce the Vault has been initialized, future restarts will automatically trigger\nthe auto-unsealing process via the transit secrets engine API provided by the Coordinator."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);