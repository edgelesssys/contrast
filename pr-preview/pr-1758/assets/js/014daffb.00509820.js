"use strict";(self.webpackChunkcontrast_docs=self.webpackChunkcontrast_docs||[]).push([[1955],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(96540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}},89204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"architecture/secrets","title":"Secrets & recovery","description":"When the Coordinator is configured with the initial manifest, it generates a random secret seed.","source":"@site/docs/architecture/secrets.md","sourceDirName":"architecture","slug":"/architecture/secrets","permalink":"/contrast/pr-preview/pr-1758/next/architecture/secrets","draft":false,"unlisted":false,"editUrl":"https://github.com/edgelesssys/contrast/edit/main/docs/docs/architecture/secrets.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Attested TLS","permalink":"/contrast/pr-preview/pr-1758/next/architecture/attestation/atls"},"next":{"title":"K8s YAML elements","permalink":"/contrast/pr-preview/pr-1758/next/architecture/k8s-yaml-elements"}}');var r=n(74848),o=n(28453);const i={},a="Secrets & recovery",c={},d=[{value:"Workload Secrets",id:"workload-secrets",level:2},{value:"Secure persistence",id:"secure-persistence",level:3},{value:"Transit secrets engine",id:"transit-secrets-engine",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"secrets--recovery",children:"Secrets & recovery"})}),"\n",(0,r.jsx)(t.p,{children:"When the Coordinator is configured with the initial manifest, it generates a random secret seed.\nFrom this seed, it uses an HKDF to derive the CA root key and a signing key for the manifest history.\nThis derivation is deterministic, so the seed can be used to bring any Coordinator to this Coordinator's state."}),"\n",(0,r.jsxs)(t.p,{children:["The secret seed is returned to the user on the first call to ",(0,r.jsx)(t.code,{children:"contrast set"}),", encrypted with the user's public seed share owner key.\nIf no seed share owner key is provided, a key is generated and stored in the working directory."]}),"\n",(0,r.jsxs)(t.admonition,{type:"danger",children:[(0,r.jsx)(t.p,{children:"The secret seed and the seed share owner key are highly sensitive."}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"If either of them leak, the Contrast deployment should be considered compromised."}),"\n",(0,r.jsx)(t.li,{children:"If the secret seed is lost, data encrypted with Contrast secrets can't be recovered."}),"\n",(0,r.jsx)(t.li,{children:"If the seed share owner key is lost, the Coordinator can't be recovered and needs to be redeployed with a new manifest."}),"\n"]})]}),"\n",(0,r.jsx)(t.h2,{id:"workload-secrets",children:"Workload Secrets"}),"\n",(0,r.jsxs)(t.p,{children:["The Coordinator provides each workload a secret seed during attestation.\nThis secret can be used by the workload to derive additional secrets for example to encrypt persistent data.\nLike the workload certificates, it's written to the ",(0,r.jsx)(t.code,{children:"secrets/workload-secret-seed"})," path under the shared Kubernetes volume ",(0,r.jsx)(t.code,{children:"contrast-secrets"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The workload secret is deterministically derived from the secret seed and a workload secret ID from the manifest.\nThis implies that workload secrets are stable across manifest updates and Coordinator recovery.\nBy default, each workload is assigned an ID based on its qualified Kubernetes resource name.\nThis ID can be changed by adding an annotation to the pod (or pod template) metadata:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    contrast.edgeless.systems/workload-secret-id: my-workload-secret\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"The seed share owner can decrypt data encrypted with secrets derived from the workload secret, because they can themselves derive the workload secret.\nIf the data owner fully trusts the seed share owner (when they're the same entity, for example), they can securely use the workload secrets."})}),"\n",(0,r.jsx)(t.h3,{id:"secure-persistence",children:"Secure persistence"}),"\n",(0,r.jsxs)(t.p,{children:["Remember that persistent volumes from the cloud provider are untrusted.\nApplications can set up trusted storage on top of an untrusted block device using the ",(0,r.jsx)(t.code,{children:"contrast.edgeless.systems/secure-pv"})," annotation.\nThis annotation enables ",(0,r.jsx)(t.code,{children:"contrast generate"})," to configure the Initializer to set up a LUKS-encrypted volume at the specified device and mount it to a specified volume.\nThe LUKS encryption utilizes the workload secret introduced above.\nConfigure any pod or pod template spec with the following annotation:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'metadata: # v1.Pod, v1.PodTemplateSpec\n  annotations:\n    contrast.edgeless.systems/secure-pv: "device-name:mount-name"\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This requires an existing block device named ",(0,r.jsx)(t.code,{children:"device-name"})," which is configured as a volume on the resource.\nThe volume ",(0,r.jsx)(t.code,{children:"mount-name"})," has to be of type ",(0,r.jsx)(t.code,{children:"EmptyDir"})," and will be created if not present.\nThe resulting Initializer will mount both the device and configured volume and set up the encrypted storage.\nWorkload containers can then use the volume as a secure storage location:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-statefulset\nspec:\n  template:\n    metadata:\n      annotations:\n        contrast.edgeless.systems/secure-pv: "device:secure"\n    spec:\n      containers:\n        - name: my-container\n          image: "my-image@sha256:..."\n          volumeMounts:\n            - mountPath: /secure\n              mountPropagation: HostToContainer\n              name: secure\n      volumes:\n        - name: device\n          persistentVolumeClaim:\n            claimName: my-pvc\n      runtimeClassName: contrast-cc\n'})}),"\n",(0,r.jsx)(t.h3,{id:"transit-secrets-engine",children:"Transit secrets engine"}),"\n",(0,r.jsxs)(t.p,{children:["In addition to the workload secrets provisioned by the initializer, Contrast workloads can ask the Coordinator to encrypt and decrypt secrets on their behalf.\nThe corresponding HTTP API is compatible with a subset of the ",(0,r.jsx)(t.a,{href:"https://openbao.org/api-docs/secret/transit/",children:"transit secrets API"})," used by ",(0,r.jsx)(t.a,{href:"https://www.hashicorp.com/en/products/vault",children:"HashiCorp Vault"}),", and is served on Coordinator port 8200.\nIts primary use case is ",(0,r.jsx)(t.a,{href:"/contrast/pr-preview/pr-1758/next/howto/vault",children:"auto-unsealing of Vault deployments"}),", which can in turn provide fine-grained secrets management to Contrast workloads."]}),"\n",(0,r.jsxs)(t.p,{children:["Workloads can only access the encryption key with the same name as their ",(0,r.jsx)(t.code,{children:"workloadSecretID"}),".\nFor example, if the workload secret ID in the manifest is ",(0,r.jsx)(t.code,{children:"my-secret-id"}),", they can use the endpoints ",(0,r.jsx)(t.code,{children:"/v1/transit/encrypt/my-secret-id"})," and ",(0,r.jsx)(t.code,{children:"/v1/transit/decrypt/my-secret-id"}),".\nLike the workload secret, the encryption key is stable across manifest updates and subject to the same limitations."]}),"\n",(0,r.jsxs)(t.p,{children:["If key rotation without changing the workload secret ID is desired, clients can pass a non-zero ",(0,r.jsx)(t.code,{children:"key_version"})," parameter to the encryption request.\nThe version is passed as an input to the key derivation mechanism, which means that the encryption key changes with the ",(0,r.jsx)(t.code,{children:"key_version"})," parameter.\nExplicit key import, export or rotation operations aren't supported."]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["The transit secret engine uses AES-256-GCM with random nonces.\nIn this mode, the risk of nonce reuse increases with the number of encrypted messages (see for example ",(0,r.jsx)(t.a,{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf",children:"NIST SP 800-38D, section 8.3"}),").\nVault unsealing operates within the recommended limits, but other cryptographic use cases might not, so we explicitly recommend using a Vault workload (or similar KMS) for those."]})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);