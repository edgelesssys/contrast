"use strict";(globalThis.webpackChunkcontrast_docs=globalThis.webpackChunkcontrast_docs||[]).push([[3007],{12520:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/runtime.drawio-c758d8c44d948830a13423b4153b749c.svg"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},92737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"architecture/components/runtime","title":"Contrast Runtime","description":"The Contrast runtime is responsible for starting pods as confidential virtual machines.","source":"@site/versioned_docs/version-1.13/architecture/components/runtime.md","sourceDirName":"architecture/components","slug":"/architecture/components/runtime","permalink":"/contrast/pr-preview/pr-1840/architecture/components/runtime","draft":false,"unlisted":false,"editUrl":"https://github.com/edgelesssys/contrast/edit/main/docs/versioned_docs/version-1.13/architecture/components/runtime.md","tags":[],"version":"1.13","frontMatter":{},"sidebar":"docs","previous":{"title":"Overview","permalink":"/contrast/pr-preview/pr-1840/architecture/overview"},"next":{"title":"Policies","permalink":"/contrast/pr-preview/pr-1840/architecture/components/policies"}}');var s=t(74848),r=t(28453);const o={},a="Contrast Runtime",c={},d=[{value:"Node-level components",id:"node-level-components",level:2},{value:"Containerd shim",id:"containerd-shim",level:3},{value:"Virtual machine manager (VMM)",id:"virtual-machine-manager-vmm",level:3},{value:"Pod-VM image",id:"pod-vm-image",level:3},{value:"Contrast image puller",id:"contrast-image-puller",level:3},{value:"Contrast secure image store",id:"contrast-secure-image-store",level:3},{value:"Node installer DaemonSet",id:"node-installer-daemonset",level:2},{value:"More on Confidential Containers",id:"more-on-confidential-containers",level:2},{value:"Kubernetes RuntimeClass",id:"kubernetes-runtimeclass",level:2},{value:"Kata Containers",id:"kata-containers",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"contrast-runtime",children:"Contrast Runtime"})}),"\n",(0,s.jsxs)(n.p,{children:["The Contrast runtime is responsible for starting pods as confidential virtual machines.\nThis works by specifying the runtime class to be used in a pod spec and by registering the runtime class with the API server.\nThe ",(0,s.jsx)(n.code,{children:"RuntimeClass"})," resource defines a name for referencing the class and\na handler used by the container runtime (",(0,s.jsx)(n.code,{children:"containerd"}),") to identify the class."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  # This name is used by pods in the runtimeClassName field\n  name: contrast-cc-abcdef\n# This name is used by the\n# container runtime interface implementation (containerd)\nhandler: contrast-cc-abcdef\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Confidential pods that are part of a Contrast deployment need to specify the\nsame runtime class in the ",(0,s.jsx)(n.code,{children:"runtimeClassName"})," field, so Kubernetes uses the\nContrast runtime instead of the default ",(0,s.jsx)(n.code,{children:"containerd"})," / ",(0,s.jsx)(n.code,{children:"runc"})," handler."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nspec:\n  runtimeClassName: contrast-cc-abcdef\n  # ...\n"})}),"\n",(0,s.jsx)(n.h2,{id:"node-level-components",children:"Node-level components"}),"\n",(0,s.jsxs)(n.p,{children:["The runtime consists of additional software components that need to be installed\nand configured on every SEV-SNP-enabled/TDX-enabled worker node.\nThis installation is performed automatically by the ",(0,s.jsxs)(n.a,{href:"#node-installer-daemonset",children:[(0,s.jsx)(n.code,{children:"node-installer"})," DaemonSet"]}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Runtime components",src:t(12520).A+""})}),"\n",(0,s.jsx)(n.h3,{id:"containerd-shim",children:"Containerd shim"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"handler"})," field in the Kubernetes ",(0,s.jsx)(n.code,{children:"RuntimeClass"})," instructs containerd not to use the default ",(0,s.jsx)(n.code,{children:"runc"})," implementation.\nInstead, containerd invokes a custom plugin called ",(0,s.jsx)(n.code,{children:"containerd-shim-contrast-cc-v2"}),".\nThis shim is described in more detail in the ",(0,s.jsx)(n.a,{href:"https://github.com/kata-containers/kata-containers/tree/3.4.0/src/runtime",children:"upstream source repository"})," and in the ",(0,s.jsx)(n.a,{href:"https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md",children:"containerd documentation"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"virtual-machine-manager-vmm",children:"Virtual machine manager (VMM)"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"containerd"})," shim uses a virtual machine monitor to create a confidential virtual machine for every pod.\nOn bare metal, Contrast uses ",(0,s.jsx)(n.a,{href:"https://www.qemu.org/",children:(0,s.jsx)(n.code,{children:"QEMU"})}),".\nThe appropriate files are installed on every node by the ",(0,s.jsx)(n.a,{href:"#node-installer-daemonset",children:(0,s.jsx)(n.code,{children:"node-installer"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"pod-vm-image",children:"Pod-VM image"}),"\n",(0,s.jsx)(n.p,{children:"Every pod-VM starts with the same guest image. It consists of an IGVM file and a root filesystem.\nThe IGVM file describes the initial memory contents of a pod-VM and consists of:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Linux kernel image"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"initrd"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"kernel commandline"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Additionally, a root filesystem image is used that contains a read-only partition with the user space of the pod-VM and a verity partition to guarantee the integrity of the root filesystem.\nThe root filesystem contains systemd as the init system, and the kata agent for managing the pod."}),"\n",(0,s.jsx)(n.p,{children:"This pod-VM image isn't specific to any pod workload. Instead, container images are mounted at runtime."}),"\n",(0,s.jsx)(n.h3,{id:"contrast-image-puller",children:"Contrast image puller"}),"\n",(0,s.jsx)(n.p,{children:"In addition to the kata agent, every pod-VM also starts Contrast's image puller.\nFor each container scheduled to run in the pod, the kata agent will request the image puller to pull and mount the corresponding container image."}),"\n",(0,s.jsx)(n.p,{children:"The image puller verifies the checksums of both the image manifest, as well as of all subsequently pulled image layers against the provided digest.\nFor this reason, unpinned images aren't supported."}),"\n",(0,s.jsx)(n.h3,{id:"contrast-secure-image-store",children:"Contrast secure image store"}),"\n",(0,s.jsxs)(n.p,{children:["In order to reduce memory requirements, Contrast supports mounting an ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/",children:"ephemeral volume"})," into each pod-VM.\nBefore first use, the underlying block device issued by Kubernetes is LUKS-encrypted and integrity protected with keys generated inside the pod-VM.\nThese keys are never persisted or transferred outside of the pod-VM, meaning the volume is only usable from within the specific pod it's attached to, and only for the duration of that pod's lifetime."]}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["It's not possible to detect a ",(0,s.jsx)(n.a,{href:"https://arxiv.org/pdf/1807.00309#page=5",children:"specific kind of replay attack"})," by the host system wherein the host replaces the contents of the encrypted block device by a previously captured snapshot of the disk.\nSince the snapshot consists purely of ciphertext generated by the pod-VM, it reads as correctly integrity-protected and the pod-VM can't distinguish it from fresh data."]}),(0,s.jsxs)(n.p,{children:["Importantly, this ",(0,s.jsx)(n.strong,{children:"doesn't"})," allow a malicious host to decrypt the ciphertext stored on the device or to inject arbitrary data."]}),(0,s.jsxs)(n.p,{children:["The trade-off between reduced resource requirements and a weakened security posture must be evaluated on a per-use-case basis.\nSee the ",(0,s.jsx)(n.a,{href:"/contrast/pr-preview/pr-1840/howto/secure-image-store",children:"secure image store how-to"})," for details on how to configure the feature for your use-case."]})]}),"\n",(0,s.jsx)(n.h2,{id:"node-installer-daemonset",children:"Node installer DaemonSet"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RuntimeClass"})," resource above registers the runtime with the Kubernetes api.\nThe node-level installation is carried out by the Contrast node-installer\n",(0,s.jsx)(n.code,{children:"DaemonSet"})," that ships with every Contrast release."]}),"\n",(0,s.jsx)(n.p,{children:"After deploying the installer, it performs the following steps on each node:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Install the Contrast containerd shim (",(0,s.jsx)(n.code,{children:"containerd-shim-contrast-cc-v2"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Install ",(0,s.jsx)(n.code,{children:"cloud-hypervisor"})," or ",(0,s.jsx)(n.code,{children:"QEMU"})," as the virtual machine manager (VMM)"]}),"\n",(0,s.jsx)(n.li,{children:"Install an IGVM file or separate firmware and kernel files for pod-VMs of this class"}),"\n",(0,s.jsx)(n.li,{children:"Install a read only root filesystem disk image for the pod-VMs of this class"}),"\n",(0,s.jsxs)(n.li,{children:["Backup any existing ",(0,s.jsx)(n.code,{children:"containerd"})," configuration in the format\n",(0,s.jsx)(n.code,{children:"<containerd-path>/<config-name>.<time>.bak"})]}),"\n",(0,s.jsxs)(n.li,{children:["Reconfigure ",(0,s.jsx)(n.code,{children:"containerd"})," by adding a runtime plugin that corresponds to the ",(0,s.jsx)(n.code,{children:"handler"})," field of the Kubernetes ",(0,s.jsx)(n.code,{children:"RuntimeClass"})]}),"\n",(0,s.jsxs)(n.li,{children:["Restart ",(0,s.jsx)(n.code,{children:"containerd"})," to make it aware of the new plugin"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"more-on-confidential-containers",children:"More on Confidential Containers"}),"\n",(0,s.jsxs)(n.p,{children:["Contrast uses some building blocks from ",(0,s.jsx)(n.a,{href:"https://confidentialcontainers.org",children:"Confidential Containers"})," (CoCo), a ",(0,s.jsx)(n.a,{href:"https://www.cncf.io/projects/confidential-containers/",children:"CNCF Sandbox project"})," that aims to standardize confidential computing at the pod level.\nThe project is under active development and many of the high-level features are still in flux.\nContrast uses the more stable core primitive provided by CoCo: its Kubernetes runtime."]}),"\n",(0,s.jsx)(n.h2,{id:"kubernetes-runtimeclass",children:"Kubernetes RuntimeClass"}),"\n",(0,s.jsxs)(n.p,{children:["Kubernetes can be extended to use more than one container runtime with ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/containers/runtime-class/",children:(0,s.jsx)(n.code,{children:"RuntimeClass"})})," objects.\nThe ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/architecture/cri/",children:"Container Runtime Interface"})," (CRI) implementation, for example containerd, dispatches pod management API calls to the appropriate ",(0,s.jsx)(n.code,{children:"RuntimeClass"}),".\n",(0,s.jsx)(n.code,{children:"RuntimeClass"})," implementations are usually based on an ",(0,s.jsx)(n.a,{href:"https://github.com/opencontainers/runtime-spec",children:"OCI runtime"}),", such as ",(0,s.jsx)(n.code,{children:"runc"}),", ",(0,s.jsx)(n.code,{children:"runsc"})," or ",(0,s.jsx)(n.code,{children:"crun"}),".\nIn CoCo's case, the runtime is Kata Containers with added confidential computing capabilities."]}),"\n",(0,s.jsx)(n.h2,{id:"kata-containers",children:"Kata Containers"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://katacontainers.io/",children:"Kata Containers"})," is an OCI runtime that runs pods in VMs.\nThe pod VM spawns an agent process that accepts management commands from the Kata runtime running on the host.\nThere are two options for creating pod VMs: local to the Kubernetes node, or remote VMs created with cloud provider APIs.\nUsing local VMs requires either bare-metal servers or VMs with support for nested virtualization.\nLocal VMs communicate with the host over a virtual socket.\nFor remote VMs, host-to-agent communication is tunnelled through the cloud provider's network."]}),"\n",(0,s.jsxs)(n.p,{children:["Kata Containers was originally designed to isolate the guest from the host, but it can also run pods in confidential VMs (CVMs) to shield pods from their underlying infrastructure.\nIn confidential mode, the guest agent is configured with an ",(0,s.jsx)(n.a,{href:"https://www.openpolicyagent.org/",children:"Open Policy Agent"})," (OPA) policy to authorize API calls from the host.\nThis policy also contains checksums for the expected container images.\nIt's derived from Kubernetes resource definitions and its checksum is included in the attestation report."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);