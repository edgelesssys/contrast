// Copyright 2025 Edgeless Systems GmbH
// SPDX-License-Identifier: AGPL-3.0-only

package testkeys

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"testing"
)

// EncodedKeyString is a base64 encoded key string.
type EncodedKeyString string

// ECDSAP256Keys contains different ECDSA P-256 keys for testing purposes.
var ECDSAP256Keys = []EncodedKeyString{
	"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgBWi+JrUare5jIyfYxQc3uJnMHTrcKwBJuOZ5HUzjJfGhRANCAASh0lJAoGtN/DlL9Aw9Em01sFK6J8p0RtwRXt3hrUL8fKkfxbK79nfG7BipIV9XGvoQJBbKtOQCnNWTPxvqfkF5",
}

// ECDSAP384Keys contains different ECDSA P-384 keys for testing purposes.
var ECDSAP384Keys = []EncodedKeyString{
	"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDD/efkwylqaAzXk7Gg6BnEpiTy3itE1HiZkLiNCY2k0X7CL61XOIU013lBBfARKcuihZANiAASogV3Zlr5RTeTr/1HWdXqnndVquHEcs76Rvxrqfc/dX28A5dXLxa/f5nHvjFCPL96mj1zRwnwx3xCvJn0Fwr+MEoWfGevEvK6kKPYl9xEcP/aPeEUi0JTIRC9D5hEGUh4=",
	"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDDpuOCYmdxja117T28+0QPguzZSL5JEfPilrUrbbf19qJ0w+lvDfLXLRgyEL78j4NihZANiAARpkYAbar62RmGNm+XtOs32/+yOizhushPMLTM79udLwWs5Zans4HybUGkLSgAsWRppG8BHMXLpgH4CxxelVcGjPusnEJlI+KURmAvwBbueWcX3SpghqRevI7qrC/UPEQA=",
	"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBslxJf2jC5YkzMJZjt6DcAdQI2poy+uWz0VDucn4j8E35vJ1D2HRweDpFMDUOMvqOhZANiAATD4afwkpBe996SNOvmUNPAlUr0ltxezD6WA6pZQrVRE9xUeFFGP16sm2XSOvKbVLUaXlDRId40iYBDkxtpeKh8gHeDAw2uhAHiNPJGSY2BMpxBI7b8B9rWG74VQhjeoL0=",
}

// RSA2048Keys contains different RSA 2048 keys for testing purposes.
var RSA2048Keys = []EncodedKeyString{
	"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",
}

// RSA4096Keys contains different RSA 4096 keys for testing purposes.
var RSA4096Keys = []EncodedKeyString{
	"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",
}

// New returns a private key for testing purposes.
func New[T crypto.PrivateKey](t *testing.T, keyString EncodedKeyString) *T {
	t.Helper()

	keyBytes, err := base64.StdEncoding.DecodeString(string(keyString))
	if err != nil {
		t.Fatal(err)
	}
	key, err := x509.ParsePKCS8PrivateKey(keyBytes)
	if err != nil {
		t.Fatal(err)
	}
	typedKey, ok := key.(*T)
	if !ok {
		t.Fatalf("invalid key type: %T", key)
	}
	return typedKey
}

// ECDSA returns an ECDSA private key for testing purposes.
func ECDSA(t *testing.T) *ecdsa.PrivateKey {
	return New[ecdsa.PrivateKey](t, ECDSAP384Keys[0])
}

// RSA returns an RSA private key for testing purposes.
func RSA(t *testing.T) *rsa.PrivateKey {
	return New[rsa.PrivateKey](t, RSA2048Keys[0])
}
