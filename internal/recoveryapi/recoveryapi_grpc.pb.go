// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: recoveryapi.proto

package recoveryapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecoveryAPI_Recover_FullMethodName = "/recoveryapi.RecoveryAPI/Recover"
)

// RecoveryAPIClient is the client API for RecoveryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecoveryAPIClient interface {
	Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
}

type recoveryAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRecoveryAPIClient(cc grpc.ClientConnInterface) RecoveryAPIClient {
	return &recoveryAPIClient{cc}
}

func (c *recoveryAPIClient) Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	out := new(RecoverResponse)
	err := c.cc.Invoke(ctx, RecoveryAPI_Recover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecoveryAPIServer is the server API for RecoveryAPI service.
// All implementations must embed UnimplementedRecoveryAPIServer
// for forward compatibility
type RecoveryAPIServer interface {
	Recover(context.Context, *RecoverRequest) (*RecoverResponse, error)
	mustEmbedUnimplementedRecoveryAPIServer()
}

// UnimplementedRecoveryAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRecoveryAPIServer struct {
}

func (UnimplementedRecoveryAPIServer) Recover(context.Context, *RecoverRequest) (*RecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedRecoveryAPIServer) mustEmbedUnimplementedRecoveryAPIServer() {}

// UnsafeRecoveryAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecoveryAPIServer will
// result in compilation errors.
type UnsafeRecoveryAPIServer interface {
	mustEmbedUnimplementedRecoveryAPIServer()
}

func RegisterRecoveryAPIServer(s grpc.ServiceRegistrar, srv RecoveryAPIServer) {
	s.RegisterService(&RecoveryAPI_ServiceDesc, srv)
}

func _RecoveryAPI_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryAPIServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecoveryAPI_Recover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryAPIServer).Recover(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecoveryAPI_ServiceDesc is the grpc.ServiceDesc for RecoveryAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecoveryAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recoveryapi.RecoveryAPI",
	HandlerType: (*RecoveryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recover",
			Handler:    _RecoveryAPI_Recover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recoveryapi.proto",
}
